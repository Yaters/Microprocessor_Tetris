
ECSE444_Tetris.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f80  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800413c  0800413c  0001413c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800417c  0800417c  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800417c  0800417c  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800417c  0800417c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800417c  0800417c  0001417c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004180  08004180  00014180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004184  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  20000070  080041f4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  080041f4  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010373  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b5  00000000  00000000  00030413  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d80  00000000  00000000  000324c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c88  00000000  00000000  00033248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a827  00000000  00000000  00033ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e70f  00000000  00000000  0005e6f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106e99  00000000  00000000  0006ce06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00173c9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a4  00000000  00000000  00173cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000070 	.word	0x20000070
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004124 	.word	0x08004124

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000074 	.word	0x20000074
 80001f8:	08004124 	.word	0x08004124

080001fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000202:	2300      	movs	r3, #0
 8000204:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000206:	2003      	movs	r0, #3
 8000208:	f000 f960 	bl	80004cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800020c:	2000      	movs	r0, #0
 800020e:	f000 f80d 	bl	800022c <HAL_InitTick>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	e001      	b.n	8000222 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800021e:	f003 fce7 	bl	8003bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000222:	79fb      	ldrb	r3, [r7, #7]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000234:	2300      	movs	r3, #0
 8000236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <HAL_InitTick+0x6c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d023      	beq.n	8000288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <HAL_InitTick+0x70>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <HAL_InitTick+0x6c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	4619      	mov	r1, r3
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000252:	fbb2 f3f3 	udiv	r3, r2, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f96d 	bl	8000536 <HAL_SYSTICK_Config>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10f      	bne.n	8000282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b0f      	cmp	r3, #15
 8000266:	d809      	bhi.n	800027c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000268:	2200      	movs	r2, #0
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	f04f 30ff 	mov.w	r0, #4294967295
 8000270:	f000 f937 	bl	80004e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <HAL_InitTick+0x74>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	e007      	b.n	800028c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800027c:	2301      	movs	r3, #1
 800027e:	73fb      	strb	r3, [r7, #15]
 8000280:	e004      	b.n	800028c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e001      	b.n	800028c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004
 800029c:	20000008 	.word	0x20000008
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_IncTick+0x20>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_IncTick+0x24>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <HAL_IncTick+0x24>)
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000004 	.word	0x20000004
 80002c8:	20000098 	.word	0x20000098

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <HAL_GetTick+0x14>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000098 	.word	0x20000098

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ec:	f7ff ffee 	bl	80002cc <HAL_GetTick>
 80002f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002fc:	d005      	beq.n	800030a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <HAL_Delay+0x44>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	4413      	add	r3, r2
 8000308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030a:	bf00      	nop
 800030c:	f7ff ffde 	bl	80002cc <HAL_GetTick>
 8000310:	4602      	mov	r2, r0
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d8f7      	bhi.n	800030c <HAL_Delay+0x28>
  {
  }
}
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000004 	.word	0x20000004

0800032c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <__NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db0b      	blt.n	80003ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 021f 	and.w	r2, r3, #31
 80003a8:	4907      	ldr	r1, [pc, #28]	; (80003c8 <__NVIC_EnableIRQ+0x38>)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	095b      	lsrs	r3, r3, #5
 80003b0:	2001      	movs	r0, #1
 80003b2:	fa00 f202 	lsl.w	r2, r0, r2
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000e100 	.word	0xe000e100

080003cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	db0a      	blt.n	80003f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	490c      	ldr	r1, [pc, #48]	; (8000418 <__NVIC_SetPriority+0x4c>)
 80003e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ea:	0112      	lsls	r2, r2, #4
 80003ec:	b2d2      	uxtb	r2, r2
 80003ee:	440b      	add	r3, r1
 80003f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f4:	e00a      	b.n	800040c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4908      	ldr	r1, [pc, #32]	; (800041c <__NVIC_SetPriority+0x50>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 030f 	and.w	r3, r3, #15
 8000402:	3b04      	subs	r3, #4
 8000404:	0112      	lsls	r2, r2, #4
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	440b      	add	r3, r1
 800040a:	761a      	strb	r2, [r3, #24]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	e000e100 	.word	0xe000e100
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000420:	b480      	push	{r7}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	f1c3 0307 	rsb	r3, r3, #7
 800043a:	2b04      	cmp	r3, #4
 800043c:	bf28      	it	cs
 800043e:	2304      	movcs	r3, #4
 8000440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	3304      	adds	r3, #4
 8000446:	2b06      	cmp	r3, #6
 8000448:	d902      	bls.n	8000450 <NVIC_EncodePriority+0x30>
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3b03      	subs	r3, #3
 800044e:	e000      	b.n	8000452 <NVIC_EncodePriority+0x32>
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000454:	f04f 32ff 	mov.w	r2, #4294967295
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	43da      	mvns	r2, r3
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	401a      	ands	r2, r3
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000468:	f04f 31ff 	mov.w	r1, #4294967295
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	43d9      	mvns	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000478:	4313      	orrs	r3, r2
         );
}
 800047a:	4618      	mov	r0, r3
 800047c:	3724      	adds	r7, #36	; 0x24
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3b01      	subs	r3, #1
 8000494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000498:	d301      	bcc.n	800049e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800049a:	2301      	movs	r3, #1
 800049c:	e00f      	b.n	80004be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800049e:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <SysTick_Config+0x40>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004a6:	210f      	movs	r1, #15
 80004a8:	f04f 30ff 	mov.w	r0, #4294967295
 80004ac:	f7ff ff8e 	bl	80003cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <SysTick_Config+0x40>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004b6:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <SysTick_Config+0x40>)
 80004b8:	2207      	movs	r2, #7
 80004ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	e000e010 	.word	0xe000e010

080004cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ff29 	bl	800032c <__NVIC_SetPriorityGrouping>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004f4:	f7ff ff3e 	bl	8000374 <__NVIC_GetPriorityGrouping>
 80004f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	68b9      	ldr	r1, [r7, #8]
 80004fe:	6978      	ldr	r0, [r7, #20]
 8000500:	f7ff ff8e 	bl	8000420 <NVIC_EncodePriority>
 8000504:	4602      	mov	r2, r0
 8000506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800050a:	4611      	mov	r1, r2
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff5d 	bl	80003cc <__NVIC_SetPriority>
}
 8000512:	bf00      	nop
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	4603      	mov	r3, r0
 8000522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <__NVIC_EnableIRQ>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff ffa2 	bl	8000488 <SysTick_Config>
 8000544:	4603      	mov	r3, r0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	e014      	b.n	800058a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d105      	bne.n	8000576 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f003 fb61 	bl	8003c38 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2202      	movs	r2, #2
 800057a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
 80005a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	795b      	ldrb	r3, [r3, #5]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d101      	bne.n	80005b2 <HAL_DAC_Start_DMA+0x1e>
 80005ae:	2302      	movs	r3, #2
 80005b0:	e0ab      	b.n	800070a <HAL_DAC_Start_DMA+0x176>
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2201      	movs	r2, #1
 80005b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2202      	movs	r2, #2
 80005bc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d12f      	bne.n	8000624 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	4a52      	ldr	r2, [pc, #328]	; (8000714 <HAL_DAC_Start_DMA+0x180>)
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	4a51      	ldr	r2, [pc, #324]	; (8000718 <HAL_DAC_Start_DMA+0x184>)
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	4a50      	ldr	r2, [pc, #320]	; (800071c <HAL_DAC_Start_DMA+0x188>)
 80005da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	2b08      	cmp	r3, #8
 80005f0:	d013      	beq.n	800061a <HAL_DAC_Start_DMA+0x86>
 80005f2:	6a3b      	ldr	r3, [r7, #32]
 80005f4:	2b08      	cmp	r3, #8
 80005f6:	d845      	bhi.n	8000684 <HAL_DAC_Start_DMA+0xf0>
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d003      	beq.n	8000606 <HAL_DAC_Start_DMA+0x72>
 80005fe:	6a3b      	ldr	r3, [r7, #32]
 8000600:	2b04      	cmp	r3, #4
 8000602:	d005      	beq.n	8000610 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000604:	e03e      	b.n	8000684 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3308      	adds	r3, #8
 800060c:	613b      	str	r3, [r7, #16]
        break;
 800060e:	e03c      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	330c      	adds	r3, #12
 8000616:	613b      	str	r3, [r7, #16]
        break;
 8000618:	e037      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3310      	adds	r3, #16
 8000620:	613b      	str	r3, [r7, #16]
        break;
 8000622:	e032      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	4a3d      	ldr	r2, [pc, #244]	; (8000720 <HAL_DAC_Start_DMA+0x18c>)
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a3c      	ldr	r2, [pc, #240]	; (8000724 <HAL_DAC_Start_DMA+0x190>)
 8000632:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	4a3b      	ldr	r2, [pc, #236]	; (8000728 <HAL_DAC_Start_DMA+0x194>)
 800063a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800064a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	2b08      	cmp	r3, #8
 8000650:	d013      	beq.n	800067a <HAL_DAC_Start_DMA+0xe6>
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	2b08      	cmp	r3, #8
 8000656:	d817      	bhi.n	8000688 <HAL_DAC_Start_DMA+0xf4>
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <HAL_DAC_Start_DMA+0xd2>
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d005      	beq.n	8000670 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000664:	e010      	b.n	8000688 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3314      	adds	r3, #20
 800066c:	613b      	str	r3, [r7, #16]
        break;
 800066e:	e00c      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3318      	adds	r3, #24
 8000676:	613b      	str	r3, [r7, #16]
        break;
 8000678:	e007      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	331c      	adds	r3, #28
 8000680:	613b      	str	r3, [r7, #16]
        break;
 8000682:	e002      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000684:	bf00      	nop
 8000686:	e000      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000688:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d111      	bne.n	80006b4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800069e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6898      	ldr	r0, [r3, #8]
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	f000 facf 	bl	8000c4c <HAL_DMA_Start_IT>
 80006ae:	4603      	mov	r3, r0
 80006b0:	75fb      	strb	r3, [r7, #23]
 80006b2:	e010      	b.n	80006d6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80006c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	68d8      	ldr	r0, [r3, #12]
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	f000 fabd 	bl	8000c4c <HAL_DMA_Start_IT>
 80006d2:	4603      	mov	r3, r0
 80006d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2200      	movs	r2, #0
 80006da:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10c      	bne.n	80006fc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	2201      	movs	r2, #1
 80006f0:	409a      	lsls	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e005      	b.n	8000708 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	f043 0204 	orr.w	r2, r3, #4
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000708:	7dfb      	ldrb	r3, [r7, #23]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	080009e9 	.word	0x080009e9
 8000718:	08000a0b 	.word	0x08000a0b
 800071c:	08000a27 	.word	0x08000a27
 8000720:	08000a91 	.word	0x08000a91
 8000724:	08000ab3 	.word	0x08000ab3
 8000728:	08000acf 	.word	0x08000acf

0800072c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	795b      	ldrb	r3, [r3, #5]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d101      	bne.n	8000784 <HAL_DAC_ConfigChannel+0x1c>
 8000780:	2302      	movs	r3, #2
 8000782:	e12a      	b.n	80009da <HAL_DAC_ConfigChannel+0x272>
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2201      	movs	r2, #1
 8000788:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2202      	movs	r2, #2
 800078e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d174      	bne.n	8000882 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000798:	f7ff fd98 	bl	80002cc <HAL_GetTick>
 800079c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d134      	bne.n	800080e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80007a4:	e011      	b.n	80007ca <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80007a6:	f7ff fd91 	bl	80002cc <HAL_GetTick>
 80007aa:	4602      	mov	r2, r0
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d90a      	bls.n	80007ca <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	f043 0208 	orr.w	r2, r3, #8
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2203      	movs	r2, #3
 80007c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80007c6:	2303      	movs	r3, #3
 80007c8:	e107      	b.n	80009da <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1e6      	bne.n	80007a6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fd83 	bl	80002e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	69d2      	ldr	r2, [r2, #28]
 80007e6:	641a      	str	r2, [r3, #64]	; 0x40
 80007e8:	e01e      	b.n	8000828 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80007ea:	f7ff fd6f 	bl	80002cc <HAL_GetTick>
 80007ee:	4602      	mov	r2, r0
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d90a      	bls.n	800080e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	691b      	ldr	r3, [r3, #16]
 80007fc:	f043 0208 	orr.w	r2, r3, #8
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2203      	movs	r2, #3
 8000808:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800080a:	2303      	movs	r3, #3
 800080c:	e0e5      	b.n	80009da <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000814:	2b00      	cmp	r3, #0
 8000816:	dbe8      	blt.n	80007ea <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff fd63 	bl	80002e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	69d2      	ldr	r2, [r2, #28]
 8000826:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f003 0310 	and.w	r3, r3, #16
 8000834:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	ea02 0103 	and.w	r1, r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	6a1a      	ldr	r2, [r3, #32]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f003 0310 	and.w	r3, r3, #16
 800084c:	409a      	lsls	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	430a      	orrs	r2, r1
 8000854:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	21ff      	movs	r1, #255	; 0xff
 8000864:	fa01 f303 	lsl.w	r3, r1, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	ea02 0103 	and.w	r1, r2, r3
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f003 0310 	and.w	r3, r3, #16
 8000878:	409a      	lsls	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	430a      	orrs	r2, r1
 8000880:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d11d      	bne.n	80008c6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000890:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f003 0310 	and.w	r3, r3, #16
 8000898:	221f      	movs	r2, #31
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	69fa      	ldr	r2, [r7, #28]
 80008a2:	4013      	ands	r3, r2
 80008a4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	69fa      	ldr	r2, [r7, #28]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008cc:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	2207      	movs	r2, #7
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4013      	ands	r3, r2
 80008e0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69fa      	ldr	r2, [r7, #28]
 8000902:	4313      	orrs	r3, r2
 8000904:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	69fa      	ldr	r2, [r7, #28]
 800090c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6819      	ldr	r1, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	400a      	ands	r2, r1
 800092a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	69fa      	ldr	r2, [r7, #28]
 8000946:	4013      	ands	r3, r2
 8000948:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	69fa      	ldr	r2, [r7, #28]
 800095e:	4313      	orrs	r3, r2
 8000960:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800096a:	d104      	bne.n	8000976 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	e018      	b.n	80009a8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d104      	bne.n	8000988 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000984:	61fb      	str	r3, [r7, #28]
 8000986:	e00f      	b.n	80009a8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000988:	f001 fb76 	bl	8002078 <HAL_RCC_GetHCLKFreq>
 800098c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <HAL_DAC_ConfigChannel+0x27c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d904      	bls.n	80009a0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800099c:	61fb      	str	r3, [r7, #28]
 800099e:	e003      	b.n	80009a8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009a6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6819      	ldr	r1, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	22c0      	movs	r2, #192	; 0xc0
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	400a      	ands	r2, r1
 80009ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2201      	movs	r2, #1
 80009d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2200      	movs	r2, #0
 80009d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3720      	adds	r7, #32
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	04c4b400 	.word	0x04c4b400

080009e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff fe98 	bl	800072c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2201      	movs	r2, #1
 8000a00:	711a      	strb	r2, [r3, #4]
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a16:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f7ff fe91 	bl	8000740 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a32:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	691b      	ldr	r3, [r3, #16]
 8000a38:	f043 0204 	orr.w	r2, r3, #4
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f7ff fe87 	bl	8000754 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	711a      	strb	r2, [r3, #4]
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff ffd8 	bl	8000a54 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	711a      	strb	r2, [r3, #4]
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b084      	sub	sp, #16
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f7ff ffd1 	bl	8000a68 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ada:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	f043 0204 	orr.w	r2, r3, #4
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f7ff ffc7 	bl	8000a7c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2201      	movs	r2, #1
 8000af2:	711a      	strb	r2, [r3, #4]
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b084      	sub	sp, #16
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e08d      	b.n	8000c2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	4b47      	ldr	r3, [pc, #284]	; (8000c34 <HAL_DMA_Init+0x138>)
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d80f      	bhi.n	8000b3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	461a      	mov	r2, r3
 8000b20:	4b45      	ldr	r3, [pc, #276]	; (8000c38 <HAL_DMA_Init+0x13c>)
 8000b22:	4413      	add	r3, r2
 8000b24:	4a45      	ldr	r2, [pc, #276]	; (8000c3c <HAL_DMA_Init+0x140>)
 8000b26:	fba2 2303 	umull	r2, r3, r2, r3
 8000b2a:	091b      	lsrs	r3, r3, #4
 8000b2c:	009a      	lsls	r2, r3, #2
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a42      	ldr	r2, [pc, #264]	; (8000c40 <HAL_DMA_Init+0x144>)
 8000b36:	641a      	str	r2, [r3, #64]	; 0x40
 8000b38:	e00e      	b.n	8000b58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	461a      	mov	r2, r3
 8000b40:	4b40      	ldr	r3, [pc, #256]	; (8000c44 <HAL_DMA_Init+0x148>)
 8000b42:	4413      	add	r3, r2
 8000b44:	4a3d      	ldr	r2, [pc, #244]	; (8000c3c <HAL_DMA_Init+0x140>)
 8000b46:	fba2 2303 	umull	r2, r3, r2, r3
 8000b4a:	091b      	lsrs	r3, r3, #4
 8000b4c:	009a      	lsls	r2, r3, #2
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a3c      	ldr	r2, [pc, #240]	; (8000c48 <HAL_DMA_Init+0x14c>)
 8000b56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2202      	movs	r2, #2
 8000b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	691b      	ldr	r3, [r3, #16]
 8000b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6a1b      	ldr	r3, [r3, #32]
 8000b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b9c:	68fa      	ldr	r2, [r7, #12]
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	68fa      	ldr	r2, [r7, #12]
 8000ba8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 f9b6 	bl	8000f1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	689b      	ldr	r3, [r3, #8]
 8000bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000bb8:	d102      	bne.n	8000bc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685a      	ldr	r2, [r3, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bc8:	b2d2      	uxtb	r2, r2
 8000bca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000bd4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d010      	beq.n	8000c00 <HAL_DMA_Init+0x104>
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	2b04      	cmp	r3, #4
 8000be4:	d80c      	bhi.n	8000c00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8000be6:	6878      	ldr	r0, [r7, #4]
 8000be8:	f000 f9d6 	bl	8000f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	e008      	b.n	8000c12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2200      	movs	r2, #0
 8000c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000c28:	2300      	movs	r3, #0
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020407 	.word	0x40020407
 8000c38:	bffdfff8 	.word	0xbffdfff8
 8000c3c:	cccccccd 	.word	0xcccccccd
 8000c40:	40020000 	.word	0x40020000
 8000c44:	bffdfbf8 	.word	0xbffdfbf8
 8000c48:	40020400 	.word	0x40020400

08000c4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
 8000c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000c64:	2b01      	cmp	r3, #1
 8000c66:	d101      	bne.n	8000c6c <HAL_DMA_Start_IT+0x20>
 8000c68:	2302      	movs	r3, #2
 8000c6a:	e066      	b.n	8000d3a <HAL_DMA_Start_IT+0xee>
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	2201      	movs	r2, #1
 8000c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000c7a:	b2db      	uxtb	r3, r3
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d155      	bne.n	8000d2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	2202      	movs	r2, #2
 8000c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	f022 0201 	bic.w	r2, r2, #1
 8000c9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	687a      	ldr	r2, [r7, #4]
 8000ca2:	68b9      	ldr	r1, [r7, #8]
 8000ca4:	68f8      	ldr	r0, [r7, #12]
 8000ca6:	f000 f8fb 	bl	8000ea0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d008      	beq.n	8000cc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	f042 020e 	orr.w	r2, r2, #14
 8000cc0:	601a      	str	r2, [r3, #0]
 8000cc2:	e00f      	b.n	8000ce4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	f022 0204 	bic.w	r2, r2, #4
 8000cd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f042 020a 	orr.w	r2, r2, #10
 8000ce2:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d007      	beq.n	8000d02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d00:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d007      	beq.n	8000d1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d18:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000d1a:	68fb      	ldr	r3, [r7, #12]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	681a      	ldr	r2, [r3, #0]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	f042 0201 	orr.w	r2, r2, #1
 8000d28:	601a      	str	r2, [r3, #0]
 8000d2a:	e005      	b.n	8000d38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d34:	2302      	movs	r3, #2
 8000d36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8000d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b084      	sub	sp, #16
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5e:	f003 031c 	and.w	r3, r3, #28
 8000d62:	2204      	movs	r2, #4
 8000d64:	409a      	lsls	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d026      	beq.n	8000dbc <HAL_DMA_IRQHandler+0x7a>
 8000d6e:	68bb      	ldr	r3, [r7, #8]
 8000d70:	f003 0304 	and.w	r3, r3, #4
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d021      	beq.n	8000dbc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f003 0320 	and.w	r3, r3, #32
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d107      	bne.n	8000d96 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0204 	bic.w	r2, r2, #4
 8000d94:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d9a:	f003 021c 	and.w	r2, r3, #28
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	2104      	movs	r1, #4
 8000da4:	fa01 f202 	lsl.w	r2, r1, r2
 8000da8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d071      	beq.n	8000e96 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db6:	6878      	ldr	r0, [r7, #4]
 8000db8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8000dba:	e06c      	b.n	8000e96 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc0:	f003 031c 	and.w	r3, r3, #28
 8000dc4:	2202      	movs	r2, #2
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d02e      	beq.n	8000e2e <HAL_DMA_IRQHandler+0xec>
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d029      	beq.n	8000e2e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0320 	and.w	r3, r3, #32
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d10b      	bne.n	8000e00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	681a      	ldr	r2, [r3, #0]
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	f022 020a 	bic.w	r2, r2, #10
 8000df6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e04:	f003 021c 	and.w	r2, r3, #28
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0c:	2102      	movs	r1, #2
 8000e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d038      	beq.n	8000e96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e2c:	e033      	b.n	8000e96 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e32:	f003 031c 	and.w	r3, r3, #28
 8000e36:	2208      	movs	r2, #8
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d02a      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x156>
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	f003 0308 	and.w	r3, r3, #8
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d025      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f022 020e 	bic.w	r2, r2, #14
 8000e5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e60:	f003 021c 	and.w	r2, r3, #28
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e68:	2101      	movs	r1, #1
 8000e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	2200      	movs	r2, #0
 8000e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d004      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e92:	6878      	ldr	r0, [r7, #4]
 8000e94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8000e96:	bf00      	nop
 8000e98:	bf00      	nop
}
 8000e9a:	3710      	adds	r7, #16
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
 8000eac:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb2:	68fa      	ldr	r2, [r7, #12]
 8000eb4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8000eb6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d004      	beq.n	8000eca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ec4:	68fa      	ldr	r2, [r7, #12]
 8000ec6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8000ec8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f003 021c 	and.w	r2, r3, #28
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed6:	2101      	movs	r1, #1
 8000ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8000edc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	683a      	ldr	r2, [r7, #0]
 8000ee4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	689b      	ldr	r3, [r3, #8]
 8000eea:	2b10      	cmp	r3, #16
 8000eec:	d108      	bne.n	8000f00 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000efe:	e007      	b.n	8000f10 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	60da      	str	r2, [r3, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	461a      	mov	r2, r3
 8000f2a:	4b17      	ldr	r3, [pc, #92]	; (8000f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d80a      	bhi.n	8000f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000f3c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	6493      	str	r3, [r2, #72]	; 0x48
 8000f44:	e007      	b.n	8000f56 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f4a:	089b      	lsrs	r3, r3, #2
 8000f4c:	009a      	lsls	r2, r3, #2
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	; (8000f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8000f50:	4413      	add	r3, r2
 8000f52:	687a      	ldr	r2, [r7, #4]
 8000f54:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	3b08      	subs	r3, #8
 8000f5e:	4a0c      	ldr	r2, [pc, #48]	; (8000f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	091b      	lsrs	r3, r3, #4
 8000f66:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8000f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	2201      	movs	r2, #1
 8000f76:	409a      	lsls	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8000f7c:	bf00      	nop
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	40020407 	.word	0x40020407
 8000f8c:	4002081c 	.word	0x4002081c
 8000f90:	cccccccd 	.word	0xcccccccd
 8000f94:	40020880 	.word	0x40020880

08000f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8000fa8:	68fa      	ldr	r2, [r7, #12]
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8000fac:	4413      	add	r3, r2
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a08      	ldr	r2, [pc, #32]	; (8000fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8000fba:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3b01      	subs	r3, #1
 8000fc0:	f003 0303 	and.w	r3, r3, #3
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	409a      	lsls	r2, r3
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8000fcc:	bf00      	nop
 8000fce:	3714      	adds	r7, #20
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd6:	4770      	bx	lr
 8000fd8:	1000823f 	.word	0x1000823f
 8000fdc:	40020940 	.word	0x40020940

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fee:	e166      	b.n	80012be <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	2b00      	cmp	r3, #0
 8001004:	f000 8158 	beq.w	80012b8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f003 0303 	and.w	r3, r3, #3
 8001010:	2b01      	cmp	r3, #1
 8001012:	d005      	beq.n	8001020 <HAL_GPIO_Init+0x40>
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d130      	bne.n	8001082 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	4013      	ands	r3, r2
 8001036:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	68da      	ldr	r2, [r3, #12]
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	693a      	ldr	r2, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001056:	2201      	movs	r2, #1
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	091b      	lsrs	r3, r3, #4
 800106c:	f003 0201 	and.w	r2, r3, #1
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	fa02 f303 	lsl.w	r3, r2, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4313      	orrs	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f003 0303 	and.w	r3, r3, #3
 800108a:	2b03      	cmp	r3, #3
 800108c:	d017      	beq.n	80010be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	697b      	ldr	r3, [r7, #20]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d123      	bne.n	8001112 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	08da      	lsrs	r2, r3, #3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	3208      	adds	r2, #8
 80010d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	f003 0307 	and.w	r3, r3, #7
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	220f      	movs	r2, #15
 80010e2:	fa02 f303 	lsl.w	r3, r2, r3
 80010e6:	43db      	mvns	r3, r3
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	4013      	ands	r3, r2
 80010ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	691a      	ldr	r2, [r3, #16]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	fa02 f303 	lsl.w	r3, r2, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4313      	orrs	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	08da      	lsrs	r2, r3, #3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	3208      	adds	r2, #8
 800110c:	6939      	ldr	r1, [r7, #16]
 800110e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	2203      	movs	r2, #3
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 0203 	and.w	r2, r3, #3
 8001132:	697b      	ldr	r3, [r7, #20]
 8001134:	005b      	lsls	r3, r3, #1
 8001136:	fa02 f303 	lsl.w	r3, r2, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800114e:	2b00      	cmp	r3, #0
 8001150:	f000 80b2 	beq.w	80012b8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001154:	4b61      	ldr	r3, [pc, #388]	; (80012dc <HAL_GPIO_Init+0x2fc>)
 8001156:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001158:	4a60      	ldr	r2, [pc, #384]	; (80012dc <HAL_GPIO_Init+0x2fc>)
 800115a:	f043 0301 	orr.w	r3, r3, #1
 800115e:	6613      	str	r3, [r2, #96]	; 0x60
 8001160:	4b5e      	ldr	r3, [pc, #376]	; (80012dc <HAL_GPIO_Init+0x2fc>)
 8001162:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001164:	f003 0301 	and.w	r3, r3, #1
 8001168:	60bb      	str	r3, [r7, #8]
 800116a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800116c:	4a5c      	ldr	r2, [pc, #368]	; (80012e0 <HAL_GPIO_Init+0x300>)
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	089b      	lsrs	r3, r3, #2
 8001172:	3302      	adds	r3, #2
 8001174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800117a:	697b      	ldr	r3, [r7, #20]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	220f      	movs	r2, #15
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	693a      	ldr	r2, [r7, #16]
 800118c:	4013      	ands	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001196:	d02b      	beq.n	80011f0 <HAL_GPIO_Init+0x210>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	4a52      	ldr	r2, [pc, #328]	; (80012e4 <HAL_GPIO_Init+0x304>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d025      	beq.n	80011ec <HAL_GPIO_Init+0x20c>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a51      	ldr	r2, [pc, #324]	; (80012e8 <HAL_GPIO_Init+0x308>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d01f      	beq.n	80011e8 <HAL_GPIO_Init+0x208>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a50      	ldr	r2, [pc, #320]	; (80012ec <HAL_GPIO_Init+0x30c>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d019      	beq.n	80011e4 <HAL_GPIO_Init+0x204>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a4f      	ldr	r2, [pc, #316]	; (80012f0 <HAL_GPIO_Init+0x310>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d013      	beq.n	80011e0 <HAL_GPIO_Init+0x200>
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a4e      	ldr	r2, [pc, #312]	; (80012f4 <HAL_GPIO_Init+0x314>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d00d      	beq.n	80011dc <HAL_GPIO_Init+0x1fc>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a4d      	ldr	r2, [pc, #308]	; (80012f8 <HAL_GPIO_Init+0x318>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d007      	beq.n	80011d8 <HAL_GPIO_Init+0x1f8>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a4c      	ldr	r2, [pc, #304]	; (80012fc <HAL_GPIO_Init+0x31c>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d101      	bne.n	80011d4 <HAL_GPIO_Init+0x1f4>
 80011d0:	2307      	movs	r3, #7
 80011d2:	e00e      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011d4:	2308      	movs	r3, #8
 80011d6:	e00c      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011d8:	2306      	movs	r3, #6
 80011da:	e00a      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011dc:	2305      	movs	r3, #5
 80011de:	e008      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011e0:	2304      	movs	r3, #4
 80011e2:	e006      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011e4:	2303      	movs	r3, #3
 80011e6:	e004      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011e8:	2302      	movs	r3, #2
 80011ea:	e002      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e000      	b.n	80011f2 <HAL_GPIO_Init+0x212>
 80011f0:	2300      	movs	r3, #0
 80011f2:	697a      	ldr	r2, [r7, #20]
 80011f4:	f002 0203 	and.w	r2, r2, #3
 80011f8:	0092      	lsls	r2, r2, #2
 80011fa:	4093      	lsls	r3, r2
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4313      	orrs	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001202:	4937      	ldr	r1, [pc, #220]	; (80012e0 <HAL_GPIO_Init+0x300>)
 8001204:	697b      	ldr	r3, [r7, #20]
 8001206:	089b      	lsrs	r3, r3, #2
 8001208:	3302      	adds	r3, #2
 800120a:	693a      	ldr	r2, [r7, #16]
 800120c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001210:	4b3b      	ldr	r3, [pc, #236]	; (8001300 <HAL_GPIO_Init+0x320>)
 8001212:	689b      	ldr	r3, [r3, #8]
 8001214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	43db      	mvns	r3, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4013      	ands	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001220:	683b      	ldr	r3, [r7, #0]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001228:	2b00      	cmp	r3, #0
 800122a:	d003      	beq.n	8001234 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	4313      	orrs	r3, r2
 8001232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001234:	4a32      	ldr	r2, [pc, #200]	; (8001300 <HAL_GPIO_Init+0x320>)
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800123a:	4b31      	ldr	r3, [pc, #196]	; (8001300 <HAL_GPIO_Init+0x320>)
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	43db      	mvns	r3, r3
 8001244:	693a      	ldr	r2, [r7, #16]
 8001246:	4013      	ands	r3, r2
 8001248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001256:	693a      	ldr	r2, [r7, #16]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800125e:	4a28      	ldr	r2, [pc, #160]	; (8001300 <HAL_GPIO_Init+0x320>)
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001264:	4b26      	ldr	r3, [pc, #152]	; (8001300 <HAL_GPIO_Init+0x320>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	43db      	mvns	r3, r3
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	4313      	orrs	r3, r2
 8001286:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001288:	4a1d      	ldr	r2, [pc, #116]	; (8001300 <HAL_GPIO_Init+0x320>)
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <HAL_GPIO_Init+0x320>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	43db      	mvns	r3, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4013      	ands	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80012b2:	4a13      	ldr	r2, [pc, #76]	; (8001300 <HAL_GPIO_Init+0x320>)
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80012b8:	697b      	ldr	r3, [r7, #20]
 80012ba:	3301      	adds	r3, #1
 80012bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	681a      	ldr	r2, [r3, #0]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	fa22 f303 	lsr.w	r3, r2, r3
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	f47f ae91 	bne.w	8000ff0 <HAL_GPIO_Init+0x10>
  }
}
 80012ce:	bf00      	nop
 80012d0:	bf00      	nop
 80012d2:	371c      	adds	r7, #28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	40021000 	.word	0x40021000
 80012e0:	40010000 	.word	0x40010000
 80012e4:	48000400 	.word	0x48000400
 80012e8:	48000800 	.word	0x48000800
 80012ec:	48000c00 	.word	0x48000c00
 80012f0:	48001000 	.word	0x48001000
 80012f4:	48001400 	.word	0x48001400
 80012f8:	48001800 	.word	0x48001800
 80012fc:	48001c00 	.word	0x48001c00
 8001300:	40010400 	.word	0x40010400

08001304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	460b      	mov	r3, r1
 800130e:	807b      	strh	r3, [r7, #2]
 8001310:	4613      	mov	r3, r2
 8001312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001314:	787b      	ldrb	r3, [r7, #1]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d003      	beq.n	8001322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800131a:	887a      	ldrh	r2, [r7, #2]
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001320:	e002      	b.n	8001328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001322:	887a      	ldrh	r2, [r7, #2]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001328:	bf00      	nop
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001338:	4b0d      	ldr	r3, [pc, #52]	; (8001370 <HAL_PWREx_GetVoltageRange+0x3c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001344:	d102      	bne.n	800134c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001346:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800134a:	e00b      	b.n	8001364 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800134c:	4b08      	ldr	r3, [pc, #32]	; (8001370 <HAL_PWREx_GetVoltageRange+0x3c>)
 800134e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001356:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800135a:	d102      	bne.n	8001362 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800135c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001360:	e000      	b.n	8001364 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001362:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	40007000 	.word	0x40007000

08001374 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2b00      	cmp	r3, #0
 8001380:	d141      	bne.n	8001406 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001382:	4b4b      	ldr	r3, [pc, #300]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800138a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800138e:	d131      	bne.n	80013f4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001390:	4b47      	ldr	r3, [pc, #284]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001392:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001396:	4a46      	ldr	r2, [pc, #280]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800139c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80013a0:	4b43      	ldr	r3, [pc, #268]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80013a8:	4a41      	ldr	r2, [pc, #260]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80013b0:	4b40      	ldr	r3, [pc, #256]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2232      	movs	r2, #50	; 0x32
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	4a3f      	ldr	r2, [pc, #252]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80013bc:	fba2 2303 	umull	r2, r3, r2, r3
 80013c0:	0c9b      	lsrs	r3, r3, #18
 80013c2:	3301      	adds	r3, #1
 80013c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013c6:	e002      	b.n	80013ce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	3b01      	subs	r3, #1
 80013cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80013ce:	4b38      	ldr	r3, [pc, #224]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013da:	d102      	bne.n	80013e2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d1f2      	bne.n	80013c8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013e2:	4b33      	ldr	r3, [pc, #204]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013e4:	695b      	ldr	r3, [r3, #20]
 80013e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013ee:	d158      	bne.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e057      	b.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80013f4:	4b2e      	ldr	r3, [pc, #184]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80013fa:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80013fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001400:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001404:	e04d      	b.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800140c:	d141      	bne.n	8001492 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800140e:	4b28      	ldr	r3, [pc, #160]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001416:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800141a:	d131      	bne.n	8001480 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800141c:	4b24      	ldr	r3, [pc, #144]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800141e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001422:	4a23      	ldr	r2, [pc, #140]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001424:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001428:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800142c:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001434:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001436:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800143a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800143c:	4b1d      	ldr	r3, [pc, #116]	; (80014b4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	2232      	movs	r2, #50	; 0x32
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	4a1c      	ldr	r2, [pc, #112]	; (80014b8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	0c9b      	lsrs	r3, r3, #18
 800144e:	3301      	adds	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001452:	e002      	b.n	800145a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	3b01      	subs	r3, #1
 8001458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800145a:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001466:	d102      	bne.n	800146e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1f2      	bne.n	8001454 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800146e:	4b10      	ldr	r3, [pc, #64]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001476:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147a:	d112      	bne.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e011      	b.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001482:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001486:	4a0a      	ldr	r2, [pc, #40]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001490:	e007      	b.n	80014a2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001492:	4b07      	ldr	r3, [pc, #28]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800149c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014a0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014a2:	2300      	movs	r3, #0
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40007000 	.word	0x40007000
 80014b4:	20000008 	.word	0x20000008
 80014b8:	431bde83 	.word	0x431bde83

080014bc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d102      	bne.n	80014d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	f000 bc16 	b.w	8001cfc <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014d0:	4ba0      	ldr	r3, [pc, #640]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f003 030c 	and.w	r3, r3, #12
 80014d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014da:	4b9e      	ldr	r3, [pc, #632]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	f003 0303 	and.w	r3, r3, #3
 80014e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 0310 	and.w	r3, r3, #16
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80e4 	beq.w	80016ba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d007      	beq.n	8001508 <HAL_RCC_OscConfig+0x4c>
 80014f8:	69bb      	ldr	r3, [r7, #24]
 80014fa:	2b0c      	cmp	r3, #12
 80014fc:	f040 808b 	bne.w	8001616 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	2b01      	cmp	r3, #1
 8001504:	f040 8087 	bne.w	8001616 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001508:	4b92      	ldr	r3, [pc, #584]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d005      	beq.n	8001520 <HAL_RCC_OscConfig+0x64>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	699b      	ldr	r3, [r3, #24]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d101      	bne.n	8001520 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e3ed      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	6a1a      	ldr	r2, [r3, #32]
 8001524:	4b8b      	ldr	r3, [pc, #556]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d004      	beq.n	800153a <HAL_RCC_OscConfig+0x7e>
 8001530:	4b88      	ldr	r3, [pc, #544]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001538:	e005      	b.n	8001546 <HAL_RCC_OscConfig+0x8a>
 800153a:	4b86      	ldr	r3, [pc, #536]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800153c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001546:	4293      	cmp	r3, r2
 8001548:	d223      	bcs.n	8001592 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6a1b      	ldr	r3, [r3, #32]
 800154e:	4618      	mov	r0, r3
 8001550:	f000 fd9e 	bl	8002090 <RCC_SetFlashLatencyFromMSIRange>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e3ce      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155e:	4b7d      	ldr	r3, [pc, #500]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a7c      	ldr	r2, [pc, #496]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001564:	f043 0308 	orr.w	r3, r3, #8
 8001568:	6013      	str	r3, [r2, #0]
 800156a:	4b7a      	ldr	r3, [pc, #488]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6a1b      	ldr	r3, [r3, #32]
 8001576:	4977      	ldr	r1, [pc, #476]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157c:	4b75      	ldr	r3, [pc, #468]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	021b      	lsls	r3, r3, #8
 800158a:	4972      	ldr	r1, [pc, #456]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800158c:	4313      	orrs	r3, r2
 800158e:	604b      	str	r3, [r1, #4]
 8001590:	e025      	b.n	80015de <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001592:	4b70      	ldr	r3, [pc, #448]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a6f      	ldr	r2, [pc, #444]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001598:	f043 0308 	orr.w	r3, r3, #8
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b6d      	ldr	r3, [pc, #436]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a1b      	ldr	r3, [r3, #32]
 80015aa:	496a      	ldr	r1, [pc, #424]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b0:	4b68      	ldr	r3, [pc, #416]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	69db      	ldr	r3, [r3, #28]
 80015bc:	021b      	lsls	r3, r3, #8
 80015be:	4965      	ldr	r1, [pc, #404]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015c4:	69bb      	ldr	r3, [r7, #24]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d109      	bne.n	80015de <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a1b      	ldr	r3, [r3, #32]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 fd5e 	bl	8002090 <RCC_SetFlashLatencyFromMSIRange>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80015da:	2301      	movs	r3, #1
 80015dc:	e38e      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015de:	f000 fcbf 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 80015e2:	4602      	mov	r2, r0
 80015e4:	4b5b      	ldr	r3, [pc, #364]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	091b      	lsrs	r3, r3, #4
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	495a      	ldr	r1, [pc, #360]	; (8001758 <HAL_RCC_OscConfig+0x29c>)
 80015f0:	5ccb      	ldrb	r3, [r1, r3]
 80015f2:	f003 031f 	and.w	r3, r3, #31
 80015f6:	fa22 f303 	lsr.w	r3, r2, r3
 80015fa:	4a58      	ldr	r2, [pc, #352]	; (800175c <HAL_RCC_OscConfig+0x2a0>)
 80015fc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80015fe:	4b58      	ldr	r3, [pc, #352]	; (8001760 <HAL_RCC_OscConfig+0x2a4>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4618      	mov	r0, r3
 8001604:	f7fe fe12 	bl	800022c <HAL_InitTick>
 8001608:	4603      	mov	r3, r0
 800160a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800160c:	7bfb      	ldrb	r3, [r7, #15]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d052      	beq.n	80016b8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	e372      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d032      	beq.n	8001684 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800161e:	4b4d      	ldr	r3, [pc, #308]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a4c      	ldr	r2, [pc, #304]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800162a:	f7fe fe4f 	bl	80002cc <HAL_GetTick>
 800162e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001630:	e008      	b.n	8001644 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001632:	f7fe fe4b 	bl	80002cc <HAL_GetTick>
 8001636:	4602      	mov	r2, r0
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d901      	bls.n	8001644 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001640:	2303      	movs	r3, #3
 8001642:	e35b      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001644:	4b43      	ldr	r3, [pc, #268]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f003 0302 	and.w	r3, r3, #2
 800164c:	2b00      	cmp	r3, #0
 800164e:	d0f0      	beq.n	8001632 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001650:	4b40      	ldr	r3, [pc, #256]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a3f      	ldr	r2, [pc, #252]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001656:	f043 0308 	orr.w	r3, r3, #8
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b3d      	ldr	r3, [pc, #244]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1b      	ldr	r3, [r3, #32]
 8001668:	493a      	ldr	r1, [pc, #232]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800166a:	4313      	orrs	r3, r2
 800166c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800166e:	4b39      	ldr	r3, [pc, #228]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	021b      	lsls	r3, r3, #8
 800167c:	4935      	ldr	r1, [pc, #212]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800167e:	4313      	orrs	r3, r2
 8001680:	604b      	str	r3, [r1, #4]
 8001682:	e01a      	b.n	80016ba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a32      	ldr	r2, [pc, #200]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800168a:	f023 0301 	bic.w	r3, r3, #1
 800168e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001690:	f7fe fe1c 	bl	80002cc <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001696:	e008      	b.n	80016aa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001698:	f7fe fe18 	bl	80002cc <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d901      	bls.n	80016aa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80016a6:	2303      	movs	r3, #3
 80016a8:	e328      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016aa:	4b2a      	ldr	r3, [pc, #168]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d1f0      	bne.n	8001698 <HAL_RCC_OscConfig+0x1dc>
 80016b6:	e000      	b.n	80016ba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d073      	beq.n	80017ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d005      	beq.n	80016d8 <HAL_RCC_OscConfig+0x21c>
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	2b0c      	cmp	r3, #12
 80016d0:	d10e      	bne.n	80016f0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	2b03      	cmp	r3, #3
 80016d6:	d10b      	bne.n	80016f0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d063      	beq.n	80017ac <HAL_RCC_OscConfig+0x2f0>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d15f      	bne.n	80017ac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e305      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016f8:	d106      	bne.n	8001708 <HAL_RCC_OscConfig+0x24c>
 80016fa:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a15      	ldr	r2, [pc, #84]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001700:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e01d      	b.n	8001744 <HAL_RCC_OscConfig+0x288>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0x270>
 8001712:	4b10      	ldr	r3, [pc, #64]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a0f      	ldr	r2, [pc, #60]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b0d      	ldr	r3, [pc, #52]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a0c      	ldr	r2, [pc, #48]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0x288>
 800172c:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a08      	ldr	r2, [pc, #32]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 8001732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a05      	ldr	r2, [pc, #20]	; (8001754 <HAL_RCC_OscConfig+0x298>)
 800173e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d01b      	beq.n	8001784 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7fe fdbe 	bl	80002cc <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001752:	e010      	b.n	8001776 <HAL_RCC_OscConfig+0x2ba>
 8001754:	40021000 	.word	0x40021000
 8001758:	0800413c 	.word	0x0800413c
 800175c:	20000008 	.word	0x20000008
 8001760:	20000000 	.word	0x20000000
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001764:	f7fe fdb2 	bl	80002cc <HAL_GetTick>
 8001768:	4602      	mov	r2, r0
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	1ad3      	subs	r3, r2, r3
 800176e:	2b64      	cmp	r3, #100	; 0x64
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e2c2      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001776:	4baf      	ldr	r3, [pc, #700]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d0f0      	beq.n	8001764 <HAL_RCC_OscConfig+0x2a8>
 8001782:	e014      	b.n	80017ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001784:	f7fe fda2 	bl	80002cc <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800178c:	f7fe fd9e 	bl	80002cc <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b64      	cmp	r3, #100	; 0x64
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e2ae      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179e:	4ba5      	ldr	r3, [pc, #660]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x2d0>
 80017aa:	e000      	b.n	80017ae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 0302 	and.w	r3, r3, #2
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d060      	beq.n	800187c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	2b04      	cmp	r3, #4
 80017be:	d005      	beq.n	80017cc <HAL_RCC_OscConfig+0x310>
 80017c0:	69bb      	ldr	r3, [r7, #24]
 80017c2:	2b0c      	cmp	r3, #12
 80017c4:	d119      	bne.n	80017fa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d116      	bne.n	80017fa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017cc:	4b99      	ldr	r3, [pc, #612]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d005      	beq.n	80017e4 <HAL_RCC_OscConfig+0x328>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e28b      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e4:	4b93      	ldr	r3, [pc, #588]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	691b      	ldr	r3, [r3, #16]
 80017f0:	061b      	lsls	r3, r3, #24
 80017f2:	4990      	ldr	r1, [pc, #576]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80017f4:	4313      	orrs	r3, r2
 80017f6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017f8:	e040      	b.n	800187c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	68db      	ldr	r3, [r3, #12]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d023      	beq.n	800184a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001802:	4b8c      	ldr	r3, [pc, #560]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a8b      	ldr	r2, [pc, #556]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001808:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800180e:	f7fe fd5d 	bl	80002cc <HAL_GetTick>
 8001812:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001814:	e008      	b.n	8001828 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001816:	f7fe fd59 	bl	80002cc <HAL_GetTick>
 800181a:	4602      	mov	r2, r0
 800181c:	693b      	ldr	r3, [r7, #16]
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	2b02      	cmp	r3, #2
 8001822:	d901      	bls.n	8001828 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001824:	2303      	movs	r3, #3
 8001826:	e269      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001828:	4b82      	ldr	r3, [pc, #520]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001830:	2b00      	cmp	r3, #0
 8001832:	d0f0      	beq.n	8001816 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001834:	4b7f      	ldr	r3, [pc, #508]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691b      	ldr	r3, [r3, #16]
 8001840:	061b      	lsls	r3, r3, #24
 8001842:	497c      	ldr	r1, [pc, #496]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
 8001848:	e018      	b.n	800187c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184a:	4b7a      	ldr	r3, [pc, #488]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a79      	ldr	r2, [pc, #484]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001854:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001856:	f7fe fd39 	bl	80002cc <HAL_GetTick>
 800185a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800185c:	e008      	b.n	8001870 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185e:	f7fe fd35 	bl	80002cc <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	693b      	ldr	r3, [r7, #16]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d901      	bls.n	8001870 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e245      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001870:	4b70      	ldr	r3, [pc, #448]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001878:	2b00      	cmp	r3, #0
 800187a:	d1f0      	bne.n	800185e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d03c      	beq.n	8001902 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	695b      	ldr	r3, [r3, #20]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d01c      	beq.n	80018ca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001890:	4b68      	ldr	r3, [pc, #416]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001892:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001896:	4a67      	ldr	r2, [pc, #412]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a0:	f7fe fd14 	bl	80002cc <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a8:	f7fe fd10 	bl	80002cc <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e220      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ba:	4b5e      	ldr	r3, [pc, #376]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80018bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d0ef      	beq.n	80018a8 <HAL_RCC_OscConfig+0x3ec>
 80018c8:	e01b      	b.n	8001902 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ca:	4b5a      	ldr	r3, [pc, #360]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80018cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d0:	4a58      	ldr	r2, [pc, #352]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80018d2:	f023 0301 	bic.w	r3, r3, #1
 80018d6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018da:	f7fe fcf7 	bl	80002cc <HAL_GetTick>
 80018de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018e2:	f7fe fcf3 	bl	80002cc <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e203      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f4:	4b4f      	ldr	r3, [pc, #316]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1ef      	bne.n	80018e2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80a6 	beq.w	8001a5c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001914:	4b47      	ldr	r3, [pc, #284]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10d      	bne.n	800193c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	4b44      	ldr	r3, [pc, #272]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	4a43      	ldr	r2, [pc, #268]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192a:	6593      	str	r3, [r2, #88]	; 0x58
 800192c:	4b41      	ldr	r3, [pc, #260]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001938:	2301      	movs	r3, #1
 800193a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193c:	4b3e      	ldr	r3, [pc, #248]	; (8001a38 <HAL_RCC_OscConfig+0x57c>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d118      	bne.n	800197a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001948:	4b3b      	ldr	r3, [pc, #236]	; (8001a38 <HAL_RCC_OscConfig+0x57c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a3a      	ldr	r2, [pc, #232]	; (8001a38 <HAL_RCC_OscConfig+0x57c>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001954:	f7fe fcba 	bl	80002cc <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195c:	f7fe fcb6 	bl	80002cc <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1c6      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196e:	4b32      	ldr	r3, [pc, #200]	; (8001a38 <HAL_RCC_OscConfig+0x57c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001976:	2b00      	cmp	r3, #0
 8001978:	d0f0      	beq.n	800195c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	2b01      	cmp	r3, #1
 8001980:	d108      	bne.n	8001994 <HAL_RCC_OscConfig+0x4d8>
 8001982:	4b2c      	ldr	r3, [pc, #176]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001988:	4a2a      	ldr	r2, [pc, #168]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 800198a:	f043 0301 	orr.w	r3, r3, #1
 800198e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001992:	e024      	b.n	80019de <HAL_RCC_OscConfig+0x522>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	2b05      	cmp	r3, #5
 800199a:	d110      	bne.n	80019be <HAL_RCC_OscConfig+0x502>
 800199c:	4b25      	ldr	r3, [pc, #148]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 800199e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a2:	4a24      	ldr	r2, [pc, #144]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ac:	4b21      	ldr	r3, [pc, #132]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80019ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b2:	4a20      	ldr	r2, [pc, #128]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019bc:	e00f      	b.n	80019de <HAL_RCC_OscConfig+0x522>
 80019be:	4b1d      	ldr	r3, [pc, #116]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80019c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c4:	4a1b      	ldr	r2, [pc, #108]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80019c6:	f023 0301 	bic.w	r3, r3, #1
 80019ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019ce:	4b19      	ldr	r3, [pc, #100]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80019d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d4:	4a17      	ldr	r2, [pc, #92]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 80019d6:	f023 0304 	bic.w	r3, r3, #4
 80019da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d016      	beq.n	8001a14 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e6:	f7fe fc71 	bl	80002cc <HAL_GetTick>
 80019ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80019ec:	e00a      	b.n	8001a04 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ee:	f7fe fc6d 	bl	80002cc <HAL_GetTick>
 80019f2:	4602      	mov	r2, r0
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fc:	4293      	cmp	r3, r2
 80019fe:	d901      	bls.n	8001a04 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a00:	2303      	movs	r3, #3
 8001a02:	e17b      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a04:	4b0b      	ldr	r3, [pc, #44]	; (8001a34 <HAL_RCC_OscConfig+0x578>)
 8001a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0ed      	beq.n	80019ee <HAL_RCC_OscConfig+0x532>
 8001a12:	e01a      	b.n	8001a4a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a14:	f7fe fc5a 	bl	80002cc <HAL_GetTick>
 8001a18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a1a:	e00f      	b.n	8001a3c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1c:	f7fe fc56 	bl	80002cc <HAL_GetTick>
 8001a20:	4602      	mov	r2, r0
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d906      	bls.n	8001a3c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e164      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
 8001a32:	bf00      	nop
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a3c:	4ba8      	ldr	r3, [pc, #672]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d1e8      	bne.n	8001a1c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a4a:	7ffb      	ldrb	r3, [r7, #31]
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d105      	bne.n	8001a5c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a50:	4ba3      	ldr	r3, [pc, #652]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a54:	4aa2      	ldr	r2, [pc, #648]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001a56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a5a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f003 0320 	and.w	r3, r3, #32
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d03c      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d01c      	beq.n	8001aaa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001a70:	4b9b      	ldr	r3, [pc, #620]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001a72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a76:	4a9a      	ldr	r2, [pc, #616]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001a78:	f043 0301 	orr.w	r3, r3, #1
 8001a7c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a80:	f7fe fc24 	bl	80002cc <HAL_GetTick>
 8001a84:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a86:	e008      	b.n	8001a9a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a88:	f7fe fc20 	bl	80002cc <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	693b      	ldr	r3, [r7, #16]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d901      	bls.n	8001a9a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e130      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a9a:	4b91      	ldr	r3, [pc, #580]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001a9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d0ef      	beq.n	8001a88 <HAL_RCC_OscConfig+0x5cc>
 8001aa8:	e01b      	b.n	8001ae2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001aaa:	4b8d      	ldr	r3, [pc, #564]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001aac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ab0:	4a8b      	ldr	r2, [pc, #556]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001ab2:	f023 0301 	bic.w	r3, r3, #1
 8001ab6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001aba:	f7fe fc07 	bl	80002cc <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ac2:	f7fe fc03 	bl	80002cc <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e113      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001ad4:	4b82      	ldr	r3, [pc, #520]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001ad6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ef      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	f000 8107 	beq.w	8001cfa <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001af0:	2b02      	cmp	r3, #2
 8001af2:	f040 80cb 	bne.w	8001c8c <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001af6:	4b7a      	ldr	r3, [pc, #488]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001af8:	68db      	ldr	r3, [r3, #12]
 8001afa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f003 0203 	and.w	r2, r3, #3
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d12c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	3b01      	subs	r3, #1
 8001b16:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d123      	bne.n	8001b64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b26:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d11b      	bne.n	8001b64 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b36:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d113      	bne.n	8001b64 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b46:	085b      	lsrs	r3, r3, #1
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d109      	bne.n	8001b64 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5a:	085b      	lsrs	r3, r3, #1
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d06d      	beq.n	8001c40 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b64:	69bb      	ldr	r3, [r7, #24]
 8001b66:	2b0c      	cmp	r3, #12
 8001b68:	d068      	beq.n	8001c3c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b6a:	4b5d      	ldr	r3, [pc, #372]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d105      	bne.n	8001b82 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b76:	4b5a      	ldr	r3, [pc, #360]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d001      	beq.n	8001b86 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e0ba      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b86:	4b56      	ldr	r3, [pc, #344]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a55      	ldr	r2, [pc, #340]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001b8c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b92:	f7fe fb9b 	bl	80002cc <HAL_GetTick>
 8001b96:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b98:	e008      	b.n	8001bac <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b9a:	f7fe fb97 	bl	80002cc <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	2b02      	cmp	r3, #2
 8001ba6:	d901      	bls.n	8001bac <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0a7      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bac:	4b4c      	ldr	r3, [pc, #304]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f0      	bne.n	8001b9a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bb8:	4b49      	ldr	r3, [pc, #292]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001bba:	68da      	ldr	r2, [r3, #12]
 8001bbc:	4b49      	ldr	r3, [pc, #292]	; (8001ce4 <HAL_RCC_OscConfig+0x828>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bc4:	687a      	ldr	r2, [r7, #4]
 8001bc6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bc8:	3a01      	subs	r2, #1
 8001bca:	0112      	lsls	r2, r2, #4
 8001bcc:	4311      	orrs	r1, r2
 8001bce:	687a      	ldr	r2, [r7, #4]
 8001bd0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bd2:	0212      	lsls	r2, r2, #8
 8001bd4:	4311      	orrs	r1, r2
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001bda:	0852      	lsrs	r2, r2, #1
 8001bdc:	3a01      	subs	r2, #1
 8001bde:	0552      	lsls	r2, r2, #21
 8001be0:	4311      	orrs	r1, r2
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001be6:	0852      	lsrs	r2, r2, #1
 8001be8:	3a01      	subs	r2, #1
 8001bea:	0652      	lsls	r2, r2, #25
 8001bec:	4311      	orrs	r1, r2
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001bf2:	06d2      	lsls	r2, r2, #27
 8001bf4:	430a      	orrs	r2, r1
 8001bf6:	493a      	ldr	r1, [pc, #232]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bfc:	4b38      	ldr	r3, [pc, #224]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a37      	ldr	r2, [pc, #220]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c02:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c06:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c08:	4b35      	ldr	r3, [pc, #212]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	4a34      	ldr	r2, [pc, #208]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c12:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c14:	f7fe fb5a 	bl	80002cc <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7fe fb56 	bl	80002cc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e066      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c2e:	4b2c      	ldr	r3, [pc, #176]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d0f0      	beq.n	8001c1c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c3a:	e05e      	b.n	8001cfa <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c3c:	2301      	movs	r3, #1
 8001c3e:	e05d      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c40:	4b27      	ldr	r3, [pc, #156]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d156      	bne.n	8001cfa <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c4c:	4b24      	ldr	r3, [pc, #144]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a23      	ldr	r2, [pc, #140]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c56:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a20      	ldr	r2, [pc, #128]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c62:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c64:	f7fe fb32 	bl	80002cc <HAL_GetTick>
 8001c68:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c6a:	e008      	b.n	8001c7e <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6c:	f7fe fb2e 	bl	80002cc <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d901      	bls.n	8001c7e <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	e03e      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c7e:	4b18      	ldr	r3, [pc, #96]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d0f0      	beq.n	8001c6c <HAL_RCC_OscConfig+0x7b0>
 8001c8a:	e036      	b.n	8001cfa <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	2b0c      	cmp	r3, #12
 8001c90:	d031      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c92:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001c98:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d105      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001caa:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	4a0c      	ldr	r2, [pc, #48]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001cb0:	f023 0303 	bic.w	r3, r3, #3
 8001cb4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cb6:	4b0a      	ldr	r3, [pc, #40]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	4a09      	ldr	r2, [pc, #36]	; (8001ce0 <HAL_RCC_OscConfig+0x824>)
 8001cbc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cc4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc6:	f7fe fb01 	bl	80002cc <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ccc:	e00c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cce:	f7fe fafd 	bl	80002cc <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d905      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e00d      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
 8001ce0:	40021000 	.word	0x40021000
 8001ce4:	019d800c 	.word	0x019d800c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <HAL_RCC_OscConfig+0x848>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1ec      	bne.n	8001cce <HAL_RCC_OscConfig+0x812>
 8001cf4:	e001      	b.n	8001cfa <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001cf6:	2301      	movs	r3, #1
 8001cf8:	e000      	b.n	8001cfc <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8001cfa:	2300      	movs	r3, #0
}
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	3720      	adds	r7, #32
 8001d00:	46bd      	mov	sp, r7
 8001d02:	bd80      	pop	{r7, pc}
 8001d04:	40021000 	.word	0x40021000

08001d08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001d12:	2300      	movs	r3, #0
 8001d14:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d101      	bne.n	8001d20 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e10f      	b.n	8001f40 <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d20:	4b89      	ldr	r3, [pc, #548]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	429a      	cmp	r2, r3
 8001d2c:	d910      	bls.n	8001d50 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d2e:	4b86      	ldr	r3, [pc, #536]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f023 020f 	bic.w	r2, r3, #15
 8001d36:	4984      	ldr	r1, [pc, #528]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d3e:	4b82      	ldr	r3, [pc, #520]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 030f 	and.w	r3, r3, #15
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0f7      	b.n	8001f40 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	f000 8089 	beq.w	8001e70 <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b03      	cmp	r3, #3
 8001d64:	d133      	bne.n	8001dce <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	4b79      	ldr	r3, [pc, #484]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e0e4      	b.n	8001f40 <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001d76:	f000 f9e5 	bl	8002144 <RCC_GetSysClockFreqFromPLLSource>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4a74      	ldr	r2, [pc, #464]	; (8001f50 <HAL_RCC_ClockConfig+0x248>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d955      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001d82:	4b72      	ldr	r3, [pc, #456]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d10a      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001d8e:	4b6f      	ldr	r3, [pc, #444]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d96:	4a6d      	ldr	r2, [pc, #436]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001d98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d9c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001d9e:	2380      	movs	r3, #128	; 0x80
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	e044      	b.n	8001e2e <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0302 	and.w	r3, r3, #2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d03e      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x126>
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d13a      	bne.n	8001e2e <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001db8:	4b64      	ldr	r3, [pc, #400]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dc0:	4a62      	ldr	r2, [pc, #392]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dc6:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001dc8:	2380      	movs	r3, #128	; 0x80
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	e02f      	b.n	8001e2e <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d107      	bne.n	8001de6 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dd6:	4b5d      	ldr	r3, [pc, #372]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d115      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e0ac      	b.n	8001f40 <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d107      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dee:	4b57      	ldr	r3, [pc, #348]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0302 	and.w	r3, r3, #2
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d109      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e0a0      	b.n	8001f40 <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dfe:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d101      	bne.n	8001e0e <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e098      	b.n	8001f40 <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001e0e:	f000 f8a7 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001e12:	4603      	mov	r3, r0
 8001e14:	4a4e      	ldr	r2, [pc, #312]	; (8001f50 <HAL_RCC_ClockConfig+0x248>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d909      	bls.n	8001e2e <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e1a:	4b4c      	ldr	r3, [pc, #304]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e22:	4a4a      	ldr	r2, [pc, #296]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e28:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8001e2a:	2380      	movs	r3, #128	; 0x80
 8001e2c:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e2e:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	f023 0203 	bic.w	r2, r3, #3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	4944      	ldr	r1, [pc, #272]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e3c:	4313      	orrs	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e40:	f7fe fa44 	bl	80002cc <HAL_GetTick>
 8001e44:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e46:	e00a      	b.n	8001e5e <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e48:	f7fe fa40 	bl	80002cc <HAL_GetTick>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	1ad3      	subs	r3, r2, r3
 8001e52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e070      	b.n	8001f40 <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5e:	4b3b      	ldr	r3, [pc, #236]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f003 020c 	and.w	r2, r3, #12
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d1eb      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0302 	and.w	r3, r3, #2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d009      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e7c:	4b33      	ldr	r3, [pc, #204]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	689b      	ldr	r3, [r3, #8]
 8001e88:	4930      	ldr	r1, [pc, #192]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	608b      	str	r3, [r1, #8]
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b80      	cmp	r3, #128	; 0x80
 8001e94:	d105      	bne.n	8001ea2 <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001e96:	4b2d      	ldr	r3, [pc, #180]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	4a2c      	ldr	r2, [pc, #176]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001e9c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ea0:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ea2:	4b29      	ldr	r3, [pc, #164]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d210      	bcs.n	8001ed2 <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f023 020f 	bic.w	r2, r3, #15
 8001eb8:	4923      	ldr	r1, [pc, #140]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <HAL_RCC_ClockConfig+0x240>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	683a      	ldr	r2, [r7, #0]
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d001      	beq.n	8001ed2 <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e036      	b.n	8001f40 <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 0304 	and.w	r3, r3, #4
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ede:	4b1b      	ldr	r3, [pc, #108]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001ee0:	689b      	ldr	r3, [r3, #8]
 8001ee2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	68db      	ldr	r3, [r3, #12]
 8001eea:	4918      	ldr	r1, [pc, #96]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f003 0308 	and.w	r3, r3, #8
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d009      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001efc:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4910      	ldr	r1, [pc, #64]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f10:	f000 f826 	bl	8001f60 <HAL_RCC_GetSysClockFreq>
 8001f14:	4602      	mov	r2, r0
 8001f16:	4b0d      	ldr	r3, [pc, #52]	; (8001f4c <HAL_RCC_ClockConfig+0x244>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	490c      	ldr	r1, [pc, #48]	; (8001f54 <HAL_RCC_ClockConfig+0x24c>)
 8001f22:	5ccb      	ldrb	r3, [r1, r3]
 8001f24:	f003 031f 	and.w	r3, r3, #31
 8001f28:	fa22 f303 	lsr.w	r3, r2, r3
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_RCC_ClockConfig+0x250>)
 8001f2e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <HAL_RCC_ClockConfig+0x254>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe f979 	bl	800022c <HAL_InitTick>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	73fb      	strb	r3, [r7, #15]

  return status;
 8001f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}
 8001f48:	40022000 	.word	0x40022000
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	04c4b400 	.word	0x04c4b400
 8001f54:	0800413c 	.word	0x0800413c
 8001f58:	20000008 	.word	0x20000008
 8001f5c:	20000000 	.word	0x20000000

08001f60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b089      	sub	sp, #36	; 0x24
 8001f64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f6e:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f003 030c 	and.w	r3, r3, #12
 8001f76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f78:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0303 	and.w	r3, r3, #3
 8001f80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d005      	beq.n	8001f94 <HAL_RCC_GetSysClockFreq+0x34>
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d121      	bne.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d11e      	bne.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f94:	4b34      	ldr	r3, [pc, #208]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0308 	and.w	r3, r3, #8
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d107      	bne.n	8001fb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001fa0:	4b31      	ldr	r3, [pc, #196]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	0a1b      	lsrs	r3, r3, #8
 8001fa8:	f003 030f 	and.w	r3, r3, #15
 8001fac:	61fb      	str	r3, [r7, #28]
 8001fae:	e005      	b.n	8001fbc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001fb0:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	091b      	lsrs	r3, r3, #4
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001fbc:	4a2b      	ldr	r2, [pc, #172]	; (800206c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd0:	e00a      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001fd2:	693b      	ldr	r3, [r7, #16]
 8001fd4:	2b04      	cmp	r3, #4
 8001fd6:	d102      	bne.n	8001fde <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001fd8:	4b25      	ldr	r3, [pc, #148]	; (8002070 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fda:	61bb      	str	r3, [r7, #24]
 8001fdc:	e004      	b.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	2b08      	cmp	r3, #8
 8001fe2:	d101      	bne.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001fe4:	4b23      	ldr	r3, [pc, #140]	; (8002074 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fe6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d134      	bne.n	8002058 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001fee:	4b1e      	ldr	r3, [pc, #120]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff0:	68db      	ldr	r3, [r3, #12]
 8001ff2:	f003 0303 	and.w	r3, r3, #3
 8001ff6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d003      	beq.n	8002006 <HAL_RCC_GetSysClockFreq+0xa6>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2b03      	cmp	r3, #3
 8002002:	d003      	beq.n	800200c <HAL_RCC_GetSysClockFreq+0xac>
 8002004:	e005      	b.n	8002012 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002006:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_RCC_GetSysClockFreq+0x110>)
 8002008:	617b      	str	r3, [r7, #20]
      break;
 800200a:	e005      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800200c:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_GetSysClockFreq+0x114>)
 800200e:	617b      	str	r3, [r7, #20]
      break;
 8002010:	e002      	b.n	8002018 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	617b      	str	r3, [r7, #20]
      break;
 8002016:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002018:	4b13      	ldr	r3, [pc, #76]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 800201a:	68db      	ldr	r3, [r3, #12]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	3301      	adds	r3, #1
 8002024:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002026:	4b10      	ldr	r3, [pc, #64]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	0a1b      	lsrs	r3, r3, #8
 800202c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002030:	697a      	ldr	r2, [r7, #20]
 8002032:	fb02 f203 	mul.w	r2, r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	fbb2 f3f3 	udiv	r3, r2, r3
 800203c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800203e:	4b0a      	ldr	r3, [pc, #40]	; (8002068 <HAL_RCC_GetSysClockFreq+0x108>)
 8002040:	68db      	ldr	r3, [r3, #12]
 8002042:	0e5b      	lsrs	r3, r3, #25
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	3301      	adds	r3, #1
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	fbb2 f3f3 	udiv	r3, r2, r3
 8002056:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002058:	69bb      	ldr	r3, [r7, #24]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3724      	adds	r7, #36	; 0x24
 800205e:	46bd      	mov	sp, r7
 8002060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002064:	4770      	bx	lr
 8002066:	bf00      	nop
 8002068:	40021000 	.word	0x40021000
 800206c:	0800414c 	.word	0x0800414c
 8002070:	00f42400 	.word	0x00f42400
 8002074:	007a1200 	.word	0x007a1200

08002078 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800207c:	4b03      	ldr	r3, [pc, #12]	; (800208c <HAL_RCC_GetHCLKFreq+0x14>)
 800207e:	681b      	ldr	r3, [r3, #0]
}
 8002080:	4618      	mov	r0, r3
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	20000008 	.word	0x20000008

08002090 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800209c:	4b27      	ldr	r3, [pc, #156]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800209e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d003      	beq.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020a8:	f7ff f944 	bl	8001334 <HAL_PWREx_GetVoltageRange>
 80020ac:	6178      	str	r0, [r7, #20]
 80020ae:	e014      	b.n	80020da <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020b0:	4b22      	ldr	r3, [pc, #136]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b4:	4a21      	ldr	r2, [pc, #132]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ba:	6593      	str	r3, [r2, #88]	; 0x58
 80020bc:	4b1f      	ldr	r3, [pc, #124]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020c4:	60fb      	str	r3, [r7, #12]
 80020c6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020c8:	f7ff f934 	bl	8001334 <HAL_PWREx_GetVoltageRange>
 80020cc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020ce:	4b1b      	ldr	r3, [pc, #108]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d2:	4a1a      	ldr	r2, [pc, #104]	; (800213c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80020d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e0:	d10b      	bne.n	80020fa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b80      	cmp	r3, #128	; 0x80
 80020e6:	d913      	bls.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2ba0      	cmp	r3, #160	; 0xa0
 80020ec:	d902      	bls.n	80020f4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020ee:	2302      	movs	r3, #2
 80020f0:	613b      	str	r3, [r7, #16]
 80020f2:	e00d      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020f4:	2301      	movs	r3, #1
 80020f6:	613b      	str	r3, [r7, #16]
 80020f8:	e00a      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b7f      	cmp	r3, #127	; 0x7f
 80020fe:	d902      	bls.n	8002106 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002100:	2302      	movs	r3, #2
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	e004      	b.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2b70      	cmp	r3, #112	; 0x70
 800210a:	d101      	bne.n	8002110 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800210c:	2301      	movs	r3, #1
 800210e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002110:	4b0b      	ldr	r3, [pc, #44]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 020f 	bic.w	r2, r3, #15
 8002118:	4909      	ldr	r1, [pc, #36]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f003 030f 	and.w	r3, r3, #15
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	429a      	cmp	r2, r3
 800212c:	d001      	beq.n	8002132 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e000      	b.n	8002134 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3718      	adds	r7, #24
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}
 800213c:	40021000 	.word	0x40021000
 8002140:	40022000 	.word	0x40022000

08002144 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002144:	b480      	push	{r7}
 8002146:	b087      	sub	sp, #28
 8002148:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800214a:	2300      	movs	r3, #0
 800214c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800214e:	4b2d      	ldr	r3, [pc, #180]	; (8002204 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	2b01      	cmp	r3, #1
 8002158:	d118      	bne.n	800218c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800215a:	4b2a      	ldr	r3, [pc, #168]	; (8002204 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	2b00      	cmp	r3, #0
 8002164:	d107      	bne.n	8002176 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002166:	4b27      	ldr	r3, [pc, #156]	; (8002204 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002168:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216c:	0a1b      	lsrs	r3, r3, #8
 800216e:	f003 030f 	and.w	r3, r3, #15
 8002172:	617b      	str	r3, [r7, #20]
 8002174:	e005      	b.n	8002182 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002176:	4b23      	ldr	r3, [pc, #140]	; (8002204 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	f003 030f 	and.w	r3, r3, #15
 8002180:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002182:	4a21      	ldr	r2, [pc, #132]	; (8002208 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800218a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800218c:	4b1d      	ldr	r3, [pc, #116]	; (8002204 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	f003 0303 	and.w	r3, r3, #3
 8002194:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b02      	cmp	r3, #2
 800219a:	d003      	beq.n	80021a4 <RCC_GetSysClockFreqFromPLLSource+0x60>
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2b03      	cmp	r3, #3
 80021a0:	d003      	beq.n	80021aa <RCC_GetSysClockFreqFromPLLSource+0x66>
 80021a2:	e005      	b.n	80021b0 <RCC_GetSysClockFreqFromPLLSource+0x6c>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80021a4:	4b19      	ldr	r3, [pc, #100]	; (800220c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80021a6:	613b      	str	r3, [r7, #16]
    break;
 80021a8:	e005      	b.n	80021b6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80021aa:	4b19      	ldr	r3, [pc, #100]	; (8002210 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80021ac:	613b      	str	r3, [r7, #16]
    break;
 80021ae:	e002      	b.n	80021b6 <RCC_GetSysClockFreqFromPLLSource+0x72>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	613b      	str	r3, [r7, #16]
    break;
 80021b4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021b8:	68db      	ldr	r3, [r3, #12]
 80021ba:	091b      	lsrs	r3, r3, #4
 80021bc:	f003 030f 	and.w	r3, r3, #15
 80021c0:	3301      	adds	r3, #1
 80021c2:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80021c4:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	0a1b      	lsrs	r3, r3, #8
 80021ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	fb02 f203 	mul.w	r2, r2, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80021da:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80021dc:	4b09      	ldr	r3, [pc, #36]	; (8002204 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	0e5b      	lsrs	r3, r3, #25
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	3301      	adds	r3, #1
 80021e8:	005b      	lsls	r3, r3, #1
 80021ea:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80021ec:	693a      	ldr	r2, [r7, #16]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021f4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80021f6:	683b      	ldr	r3, [r7, #0]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	371c      	adds	r7, #28
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr
 8002204:	40021000 	.word	0x40021000
 8002208:	0800414c 	.word	0x0800414c
 800220c:	00f42400 	.word	0x00f42400
 8002210:	007a1200 	.word	0x007a1200

08002214 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2b00      	cmp	r3, #0
 8002220:	d101      	bne.n	8002226 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e049      	b.n	80022ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b00      	cmp	r3, #0
 8002230:	d106      	bne.n	8002240 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f001 fd6a 	bl	8003d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2202      	movs	r2, #2
 8002244:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	3304      	adds	r3, #4
 8002250:	4619      	mov	r1, r3
 8002252:	4610      	mov	r0, r2
 8002254:	f000 fc66 	bl	8002b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2201      	movs	r2, #1
 800225c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2201      	movs	r2, #1
 8002264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2201      	movs	r2, #1
 800226c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2201      	movs	r2, #1
 8002274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2201      	movs	r2, #1
 800227c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2201      	movs	r2, #1
 800228c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2201      	movs	r2, #1
 800229c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2201      	movs	r2, #1
 80022a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2201      	movs	r2, #1
 80022ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2201      	movs	r2, #1
 80022b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
	...

080022c4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b085      	sub	sp, #20
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d001      	beq.n	80022dc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80022d8:	2301      	movs	r3, #1
 80022da:	e047      	b.n	800236c <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2202      	movs	r2, #2
 80022e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a23      	ldr	r2, [pc, #140]	; (8002378 <HAL_TIM_Base_Start+0xb4>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d01d      	beq.n	800232a <HAL_TIM_Base_Start+0x66>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022f6:	d018      	beq.n	800232a <HAL_TIM_Base_Start+0x66>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a1f      	ldr	r2, [pc, #124]	; (800237c <HAL_TIM_Base_Start+0xb8>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d013      	beq.n	800232a <HAL_TIM_Base_Start+0x66>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a1e      	ldr	r2, [pc, #120]	; (8002380 <HAL_TIM_Base_Start+0xbc>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d00e      	beq.n	800232a <HAL_TIM_Base_Start+0x66>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a1c      	ldr	r2, [pc, #112]	; (8002384 <HAL_TIM_Base_Start+0xc0>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d009      	beq.n	800232a <HAL_TIM_Base_Start+0x66>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a1b      	ldr	r2, [pc, #108]	; (8002388 <HAL_TIM_Base_Start+0xc4>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d004      	beq.n	800232a <HAL_TIM_Base_Start+0x66>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a19      	ldr	r2, [pc, #100]	; (800238c <HAL_TIM_Base_Start+0xc8>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d115      	bne.n	8002356 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	689a      	ldr	r2, [r3, #8]
 8002330:	4b17      	ldr	r3, [pc, #92]	; (8002390 <HAL_TIM_Base_Start+0xcc>)
 8002332:	4013      	ands	r3, r2
 8002334:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2b06      	cmp	r3, #6
 800233a:	d015      	beq.n	8002368 <HAL_TIM_Base_Start+0xa4>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002342:	d011      	beq.n	8002368 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002354:	e008      	b.n	8002368 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681a      	ldr	r2, [r3, #0]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f042 0201 	orr.w	r2, r2, #1
 8002364:	601a      	str	r2, [r3, #0]
 8002366:	e000      	b.n	800236a <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002368:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3714      	adds	r7, #20
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr
 8002378:	40012c00 	.word	0x40012c00
 800237c:	40000400 	.word	0x40000400
 8002380:	40000800 	.word	0x40000800
 8002384:	40000c00 	.word	0x40000c00
 8002388:	40013400 	.word	0x40013400
 800238c:	40014000 	.word	0x40014000
 8002390:	00010007 	.word	0x00010007

08002394 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e049      	b.n	800243a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f000 f841 	bl	8002442 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3304      	adds	r3, #4
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f000 fba6 	bl	8002b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2201      	movs	r2, #1
 80023e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2201      	movs	r2, #1
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2201      	movs	r2, #1
 80023fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2201      	movs	r2, #1
 8002404:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr

08002456 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0302 	and.w	r3, r3, #2
 8002468:	2b02      	cmp	r3, #2
 800246a:	d122      	bne.n	80024b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0302 	and.w	r3, r3, #2
 8002476:	2b02      	cmp	r3, #2
 8002478:	d11b      	bne.n	80024b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0202 	mvn.w	r2, #2
 8002482:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2201      	movs	r2, #1
 8002488:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 fb24 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 800249e:	e005      	b.n	80024ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fb16 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fb27 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b04      	cmp	r3, #4
 80024be:	d122      	bne.n	8002506 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0304 	and.w	r3, r3, #4
 80024ca:	2b04      	cmp	r3, #4
 80024cc:	d11b      	bne.n	8002506 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f06f 0204 	mvn.w	r2, #4
 80024d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2202      	movs	r2, #2
 80024dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 fafa 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 80024f2:	e005      	b.n	8002500 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 faec 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 fafd 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f003 0308 	and.w	r3, r3, #8
 8002510:	2b08      	cmp	r3, #8
 8002512:	d122      	bne.n	800255a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0308 	and.w	r3, r3, #8
 800251e:	2b08      	cmp	r3, #8
 8002520:	d11b      	bne.n	800255a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f06f 0208 	mvn.w	r2, #8
 800252a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2204      	movs	r2, #4
 8002530:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	69db      	ldr	r3, [r3, #28]
 8002538:	f003 0303 	and.w	r3, r3, #3
 800253c:	2b00      	cmp	r3, #0
 800253e:	d003      	beq.n	8002548 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 fad0 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 8002546:	e005      	b.n	8002554 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fac2 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800254e:	6878      	ldr	r0, [r7, #4]
 8002550:	f000 fad3 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2200      	movs	r2, #0
 8002558:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	f003 0310 	and.w	r3, r3, #16
 8002564:	2b10      	cmp	r3, #16
 8002566:	d122      	bne.n	80025ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	68db      	ldr	r3, [r3, #12]
 800256e:	f003 0310 	and.w	r3, r3, #16
 8002572:	2b10      	cmp	r3, #16
 8002574:	d11b      	bne.n	80025ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f06f 0210 	mvn.w	r2, #16
 800257e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2208      	movs	r2, #8
 8002584:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	69db      	ldr	r3, [r3, #28]
 800258c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002590:	2b00      	cmp	r3, #0
 8002592:	d003      	beq.n	800259c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 faa6 	bl	8002ae6 <HAL_TIM_IC_CaptureCallback>
 800259a:	e005      	b.n	80025a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800259c:	6878      	ldr	r0, [r7, #4]
 800259e:	f000 fa98 	bl	8002ad2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f000 faa9 	bl	8002afa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691b      	ldr	r3, [r3, #16]
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b01      	cmp	r3, #1
 80025ba:	d10e      	bne.n	80025da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d107      	bne.n	80025da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f06f 0201 	mvn.w	r2, #1
 80025d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025d4:	6878      	ldr	r0, [r7, #4]
 80025d6:	f001 fafb 	bl	8003bd0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e4:	2b80      	cmp	r3, #128	; 0x80
 80025e6:	d10e      	bne.n	8002606 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	2b80      	cmp	r3, #128	; 0x80
 80025f4:	d107      	bne.n	8002606 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 ffbf 	bl	8003584 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002610:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002614:	d10e      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68db      	ldr	r3, [r3, #12]
 800261c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002620:	2b80      	cmp	r3, #128	; 0x80
 8002622:	d107      	bne.n	8002634 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800262c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 ffb2 	bl	8003598 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	691b      	ldr	r3, [r3, #16]
 800263a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d10e      	bne.n	8002660 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d107      	bne.n	8002660 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fa57 	bl	8002b0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0320 	and.w	r3, r3, #32
 800266a:	2b20      	cmp	r3, #32
 800266c:	d10e      	bne.n	800268c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0320 	and.w	r3, r3, #32
 8002678:	2b20      	cmp	r3, #32
 800267a:	d107      	bne.n	800268c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0220 	mvn.w	r2, #32
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f000 ff72 	bl	8003570 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800268c:	bf00      	nop
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	60b9      	str	r1, [r7, #8]
 800269e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d101      	bne.n	80026b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e0ff      	b.n	80028b2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b14      	cmp	r3, #20
 80026be:	f200 80f0 	bhi.w	80028a2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80026c2:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80026c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c8:	0800271d 	.word	0x0800271d
 80026cc:	080028a3 	.word	0x080028a3
 80026d0:	080028a3 	.word	0x080028a3
 80026d4:	080028a3 	.word	0x080028a3
 80026d8:	0800275d 	.word	0x0800275d
 80026dc:	080028a3 	.word	0x080028a3
 80026e0:	080028a3 	.word	0x080028a3
 80026e4:	080028a3 	.word	0x080028a3
 80026e8:	0800279f 	.word	0x0800279f
 80026ec:	080028a3 	.word	0x080028a3
 80026f0:	080028a3 	.word	0x080028a3
 80026f4:	080028a3 	.word	0x080028a3
 80026f8:	080027df 	.word	0x080027df
 80026fc:	080028a3 	.word	0x080028a3
 8002700:	080028a3 	.word	0x080028a3
 8002704:	080028a3 	.word	0x080028a3
 8002708:	08002821 	.word	0x08002821
 800270c:	080028a3 	.word	0x080028a3
 8002710:	080028a3 	.word	0x080028a3
 8002714:	080028a3 	.word	0x080028a3
 8002718:	08002861 	.word	0x08002861
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	68b9      	ldr	r1, [r7, #8]
 8002722:	4618      	mov	r0, r3
 8002724:	f000 fa98 	bl	8002c58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f042 0208 	orr.w	r2, r2, #8
 8002736:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	699a      	ldr	r2, [r3, #24]
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f022 0204 	bic.w	r2, r2, #4
 8002746:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6999      	ldr	r1, [r3, #24]
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	691a      	ldr	r2, [r3, #16]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	430a      	orrs	r2, r1
 8002758:	619a      	str	r2, [r3, #24]
      break;
 800275a:	e0a5      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68b9      	ldr	r1, [r7, #8]
 8002762:	4618      	mov	r0, r3
 8002764:	f000 fb08 	bl	8002d78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	699a      	ldr	r2, [r3, #24]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002776:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	699a      	ldr	r2, [r3, #24]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002786:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6999      	ldr	r1, [r3, #24]
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	691b      	ldr	r3, [r3, #16]
 8002792:	021a      	lsls	r2, r3, #8
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	430a      	orrs	r2, r1
 800279a:	619a      	str	r2, [r3, #24]
      break;
 800279c:	e084      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68b9      	ldr	r1, [r7, #8]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f000 fb71 	bl	8002e8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f042 0208 	orr.w	r2, r2, #8
 80027b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f022 0204 	bic.w	r2, r2, #4
 80027c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69d9      	ldr	r1, [r3, #28]
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	430a      	orrs	r2, r1
 80027da:	61da      	str	r2, [r3, #28]
      break;
 80027dc:	e064      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 fbd9 	bl	8002f9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	69da      	ldr	r2, [r3, #28]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	69da      	ldr	r2, [r3, #28]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002808:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69d9      	ldr	r1, [r3, #28]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	021a      	lsls	r2, r3, #8
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	61da      	str	r2, [r3, #28]
      break;
 800281e:	e043      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	68b9      	ldr	r1, [r7, #8]
 8002826:	4618      	mov	r0, r3
 8002828:	f000 fc22 	bl	8003070 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0208 	orr.w	r2, r2, #8
 800283a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f022 0204 	bic.w	r2, r2, #4
 800284a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	691a      	ldr	r2, [r3, #16]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	430a      	orrs	r2, r1
 800285c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800285e:	e023      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68b9      	ldr	r1, [r7, #8]
 8002866:	4618      	mov	r0, r3
 8002868:	f000 fc66 	bl	8003138 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800287a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800288a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	021a      	lsls	r2, r3, #8
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	430a      	orrs	r2, r1
 800289e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80028a0:	e002      	b.n	80028a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	75fb      	strb	r3, [r7, #23]
      break;
 80028a6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80028b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3718      	adds	r7, #24
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop

080028bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_TIM_ConfigClockSource+0x1c>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e0b6      	b.n	8002a46 <HAL_TIM_ConfigClockSource+0x18a>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2202      	movs	r2, #2
 80028e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80028fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002902:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68ba      	ldr	r2, [r7, #8]
 800290a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002914:	d03e      	beq.n	8002994 <HAL_TIM_ConfigClockSource+0xd8>
 8002916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291a:	f200 8087 	bhi.w	8002a2c <HAL_TIM_ConfigClockSource+0x170>
 800291e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002922:	f000 8086 	beq.w	8002a32 <HAL_TIM_ConfigClockSource+0x176>
 8002926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292a:	d87f      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x170>
 800292c:	2b70      	cmp	r3, #112	; 0x70
 800292e:	d01a      	beq.n	8002966 <HAL_TIM_ConfigClockSource+0xaa>
 8002930:	2b70      	cmp	r3, #112	; 0x70
 8002932:	d87b      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x170>
 8002934:	2b60      	cmp	r3, #96	; 0x60
 8002936:	d050      	beq.n	80029da <HAL_TIM_ConfigClockSource+0x11e>
 8002938:	2b60      	cmp	r3, #96	; 0x60
 800293a:	d877      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x170>
 800293c:	2b50      	cmp	r3, #80	; 0x50
 800293e:	d03c      	beq.n	80029ba <HAL_TIM_ConfigClockSource+0xfe>
 8002940:	2b50      	cmp	r3, #80	; 0x50
 8002942:	d873      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x170>
 8002944:	2b40      	cmp	r3, #64	; 0x40
 8002946:	d058      	beq.n	80029fa <HAL_TIM_ConfigClockSource+0x13e>
 8002948:	2b40      	cmp	r3, #64	; 0x40
 800294a:	d86f      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x170>
 800294c:	2b30      	cmp	r3, #48	; 0x30
 800294e:	d064      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x15e>
 8002950:	2b30      	cmp	r3, #48	; 0x30
 8002952:	d86b      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x170>
 8002954:	2b20      	cmp	r3, #32
 8002956:	d060      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x15e>
 8002958:	2b20      	cmp	r3, #32
 800295a:	d867      	bhi.n	8002a2c <HAL_TIM_ConfigClockSource+0x170>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d05c      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x15e>
 8002960:	2b10      	cmp	r3, #16
 8002962:	d05a      	beq.n	8002a1a <HAL_TIM_ConfigClockSource+0x15e>
 8002964:	e062      	b.n	8002a2c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6818      	ldr	r0, [r3, #0]
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	6899      	ldr	r1, [r3, #8]
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	f000 fd52 	bl	800341e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	689b      	ldr	r3, [r3, #8]
 8002980:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002988:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	68ba      	ldr	r2, [r7, #8]
 8002990:	609a      	str	r2, [r3, #8]
      break;
 8002992:	e04f      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6818      	ldr	r0, [r3, #0]
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6899      	ldr	r1, [r3, #8]
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	685a      	ldr	r2, [r3, #4]
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f000 fd3b 	bl	800341e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	689a      	ldr	r2, [r3, #8]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80029b6:	609a      	str	r2, [r3, #8]
      break;
 80029b8:	e03c      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6818      	ldr	r0, [r3, #0]
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	6859      	ldr	r1, [r3, #4]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f000 fcaf 	bl	800332a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2150      	movs	r1, #80	; 0x50
 80029d2:	4618      	mov	r0, r3
 80029d4:	f000 fd08 	bl	80033e8 <TIM_ITRx_SetConfig>
      break;
 80029d8:	e02c      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	6859      	ldr	r1, [r3, #4]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	68db      	ldr	r3, [r3, #12]
 80029e6:	461a      	mov	r2, r3
 80029e8:	f000 fcce 	bl	8003388 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2160      	movs	r1, #96	; 0x60
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fcf8 	bl	80033e8 <TIM_ITRx_SetConfig>
      break;
 80029f8:	e01c      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	6859      	ldr	r1, [r3, #4]
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	461a      	mov	r2, r3
 8002a08:	f000 fc8f 	bl	800332a <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	2140      	movs	r1, #64	; 0x40
 8002a12:	4618      	mov	r0, r3
 8002a14:	f000 fce8 	bl	80033e8 <TIM_ITRx_SetConfig>
      break;
 8002a18:	e00c      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4619      	mov	r1, r3
 8002a24:	4610      	mov	r0, r2
 8002a26:	f000 fcdf 	bl	80033e8 <TIM_ITRx_SetConfig>
      break;
 8002a2a:	e003      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a30:	e000      	b.n	8002a34 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002a32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2201      	movs	r2, #1
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3710      	adds	r7, #16
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}

08002a4e <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002a4e:	b580      	push	{r7, lr}
 8002a50:	b082      	sub	sp, #8
 8002a52:	af00      	add	r7, sp, #0
 8002a54:	6078      	str	r0, [r7, #4]
 8002a56:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d101      	bne.n	8002a66 <HAL_TIM_SlaveConfigSynchro+0x18>
 8002a62:	2302      	movs	r3, #2
 8002a64:	e031      	b.n	8002aca <HAL_TIM_SlaveConfigSynchro+0x7c>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2201      	movs	r2, #1
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2202      	movs	r2, #2
 8002a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8002a76:	6839      	ldr	r1, [r7, #0]
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f000 fbc3 	bl	8003204 <TIM_SlaveTimer_SetConfig>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d009      	beq.n	8002a98 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2200      	movs	r2, #0
 8002a90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e018      	b.n	8002aca <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002aa6:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002ab6:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3708      	adds	r7, #8
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad2:	b480      	push	{r7}
 8002ad4:	b083      	sub	sp, #12
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae6:	b480      	push	{r7}
 8002ae8:	b083      	sub	sp, #12
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b02:	bf00      	nop
 8002b04:	370c      	adds	r7, #12
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b083      	sub	sp, #12
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a40      	ldr	r2, [pc, #256]	; (8002c38 <TIM_Base_SetConfig+0x114>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d013      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b42:	d00f      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a3d      	ldr	r2, [pc, #244]	; (8002c3c <TIM_Base_SetConfig+0x118>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a3c      	ldr	r2, [pc, #240]	; (8002c40 <TIM_Base_SetConfig+0x11c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3b      	ldr	r2, [pc, #236]	; (8002c44 <TIM_Base_SetConfig+0x120>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a3a      	ldr	r2, [pc, #232]	; (8002c48 <TIM_Base_SetConfig+0x124>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a2f      	ldr	r2, [pc, #188]	; (8002c38 <TIM_Base_SetConfig+0x114>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01f      	beq.n	8002bbe <TIM_Base_SetConfig+0x9a>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b84:	d01b      	beq.n	8002bbe <TIM_Base_SetConfig+0x9a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a2c      	ldr	r2, [pc, #176]	; (8002c3c <TIM_Base_SetConfig+0x118>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d017      	beq.n	8002bbe <TIM_Base_SetConfig+0x9a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a2b      	ldr	r2, [pc, #172]	; (8002c40 <TIM_Base_SetConfig+0x11c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d013      	beq.n	8002bbe <TIM_Base_SetConfig+0x9a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a2a      	ldr	r2, [pc, #168]	; (8002c44 <TIM_Base_SetConfig+0x120>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d00f      	beq.n	8002bbe <TIM_Base_SetConfig+0x9a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a29      	ldr	r2, [pc, #164]	; (8002c48 <TIM_Base_SetConfig+0x124>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00b      	beq.n	8002bbe <TIM_Base_SetConfig+0x9a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a28      	ldr	r2, [pc, #160]	; (8002c4c <TIM_Base_SetConfig+0x128>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <TIM_Base_SetConfig+0x9a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a27      	ldr	r2, [pc, #156]	; (8002c50 <TIM_Base_SetConfig+0x12c>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d003      	beq.n	8002bbe <TIM_Base_SetConfig+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a26      	ldr	r2, [pc, #152]	; (8002c54 <TIM_Base_SetConfig+0x130>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d108      	bne.n	8002bd0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bc4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	68fa      	ldr	r2, [r7, #12]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	695b      	ldr	r3, [r3, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68fa      	ldr	r2, [r7, #12]
 8002be2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	4a10      	ldr	r2, [pc, #64]	; (8002c38 <TIM_Base_SetConfig+0x114>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d00f      	beq.n	8002c1c <TIM_Base_SetConfig+0xf8>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <TIM_Base_SetConfig+0x124>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00b      	beq.n	8002c1c <TIM_Base_SetConfig+0xf8>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a11      	ldr	r2, [pc, #68]	; (8002c4c <TIM_Base_SetConfig+0x128>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <TIM_Base_SetConfig+0xf8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a10      	ldr	r2, [pc, #64]	; (8002c50 <TIM_Base_SetConfig+0x12c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0xf8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <TIM_Base_SetConfig+0x130>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d103      	bne.n	8002c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	615a      	str	r2, [r3, #20]
}
 8002c2a:	bf00      	nop
 8002c2c:	3714      	adds	r7, #20
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40012c00 	.word	0x40012c00
 8002c3c:	40000400 	.word	0x40000400
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40000c00 	.word	0x40000c00
 8002c48:	40013400 	.word	0x40013400
 8002c4c:	40014000 	.word	0x40014000
 8002c50:	40014400 	.word	0x40014400
 8002c54:	40014800 	.word	0x40014800

08002c58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b087      	sub	sp, #28
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	f023 0201 	bic.w	r2, r3, #1
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6a1b      	ldr	r3, [r3, #32]
 8002c72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	f023 0303 	bic.w	r3, r3, #3
 8002c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	68fa      	ldr	r2, [r7, #12]
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002c9e:	697b      	ldr	r3, [r7, #20]
 8002ca0:	f023 0302 	bic.w	r3, r3, #2
 8002ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	697a      	ldr	r2, [r7, #20]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a2c      	ldr	r2, [pc, #176]	; (8002d64 <TIM_OC1_SetConfig+0x10c>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d00f      	beq.n	8002cd8 <TIM_OC1_SetConfig+0x80>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a2b      	ldr	r2, [pc, #172]	; (8002d68 <TIM_OC1_SetConfig+0x110>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00b      	beq.n	8002cd8 <TIM_OC1_SetConfig+0x80>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <TIM_OC1_SetConfig+0x114>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d007      	beq.n	8002cd8 <TIM_OC1_SetConfig+0x80>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	4a29      	ldr	r2, [pc, #164]	; (8002d70 <TIM_OC1_SetConfig+0x118>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d003      	beq.n	8002cd8 <TIM_OC1_SetConfig+0x80>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	4a28      	ldr	r2, [pc, #160]	; (8002d74 <TIM_OC1_SetConfig+0x11c>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d10c      	bne.n	8002cf2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	f023 0308 	bic.w	r3, r3, #8
 8002cde:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	68db      	ldr	r3, [r3, #12]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	; (8002d64 <TIM_OC1_SetConfig+0x10c>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d00f      	beq.n	8002d1a <TIM_OC1_SetConfig+0xc2>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a1a      	ldr	r2, [pc, #104]	; (8002d68 <TIM_OC1_SetConfig+0x110>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d00b      	beq.n	8002d1a <TIM_OC1_SetConfig+0xc2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <TIM_OC1_SetConfig+0x114>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d007      	beq.n	8002d1a <TIM_OC1_SetConfig+0xc2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <TIM_OC1_SetConfig+0x118>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d003      	beq.n	8002d1a <TIM_OC1_SetConfig+0xc2>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <TIM_OC1_SetConfig+0x11c>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d111      	bne.n	8002d3e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	695b      	ldr	r3, [r3, #20]
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	693a      	ldr	r2, [r7, #16]
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	685a      	ldr	r2, [r3, #4]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	621a      	str	r2, [r3, #32]
}
 8002d58:	bf00      	nop
 8002d5a:	371c      	adds	r7, #28
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40012c00 	.word	0x40012c00
 8002d68:	40013400 	.word	0x40013400
 8002d6c:	40014000 	.word	0x40014000
 8002d70:	40014400 	.word	0x40014400
 8002d74:	40014800 	.word	0x40014800

08002d78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b087      	sub	sp, #28
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	f023 0210 	bic.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002da6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002daa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	021b      	lsls	r3, r3, #8
 8002dba:	68fa      	ldr	r2, [r7, #12]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f023 0320 	bic.w	r3, r3, #32
 8002dc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	011b      	lsls	r3, r3, #4
 8002dce:	697a      	ldr	r2, [r7, #20]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4a28      	ldr	r2, [pc, #160]	; (8002e78 <TIM_OC2_SetConfig+0x100>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d003      	beq.n	8002de4 <TIM_OC2_SetConfig+0x6c>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	4a27      	ldr	r2, [pc, #156]	; (8002e7c <TIM_OC2_SetConfig+0x104>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d10d      	bne.n	8002e00 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002dea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	697a      	ldr	r2, [r7, #20]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a1d      	ldr	r2, [pc, #116]	; (8002e78 <TIM_OC2_SetConfig+0x100>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d00f      	beq.n	8002e28 <TIM_OC2_SetConfig+0xb0>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a1c      	ldr	r2, [pc, #112]	; (8002e7c <TIM_OC2_SetConfig+0x104>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00b      	beq.n	8002e28 <TIM_OC2_SetConfig+0xb0>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	4a1b      	ldr	r2, [pc, #108]	; (8002e80 <TIM_OC2_SetConfig+0x108>)
 8002e14:	4293      	cmp	r3, r2
 8002e16:	d007      	beq.n	8002e28 <TIM_OC2_SetConfig+0xb0>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	4a1a      	ldr	r2, [pc, #104]	; (8002e84 <TIM_OC2_SetConfig+0x10c>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d003      	beq.n	8002e28 <TIM_OC2_SetConfig+0xb0>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a19      	ldr	r2, [pc, #100]	; (8002e88 <TIM_OC2_SetConfig+0x110>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d113      	bne.n	8002e50 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	693a      	ldr	r2, [r7, #16]
 8002e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68fa      	ldr	r2, [r7, #12]
 8002e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	685a      	ldr	r2, [r3, #4]
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	621a      	str	r2, [r3, #32]
}
 8002e6a:	bf00      	nop
 8002e6c:	371c      	adds	r7, #28
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40012c00 	.word	0x40012c00
 8002e7c:	40013400 	.word	0x40013400
 8002e80:	40014000 	.word	0x40014000
 8002e84:	40014400 	.word	0x40014400
 8002e88:	40014800 	.word	0x40014800

08002e8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b087      	sub	sp, #28
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
 8002e94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a1b      	ldr	r3, [r3, #32]
 8002e9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6a1b      	ldr	r3, [r3, #32]
 8002ea6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	69db      	ldr	r3, [r3, #28]
 8002eb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f023 0303 	bic.w	r3, r3, #3
 8002ec6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ed8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	697a      	ldr	r2, [r7, #20]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a27      	ldr	r2, [pc, #156]	; (8002f88 <TIM_OC3_SetConfig+0xfc>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d003      	beq.n	8002ef6 <TIM_OC3_SetConfig+0x6a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <TIM_OC3_SetConfig+0x100>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d10d      	bne.n	8002f12 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002efc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	68db      	ldr	r3, [r3, #12]
 8002f02:	021b      	lsls	r3, r3, #8
 8002f04:	697a      	ldr	r2, [r7, #20]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <TIM_OC3_SetConfig+0xfc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d00f      	beq.n	8002f3a <TIM_OC3_SetConfig+0xae>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a1b      	ldr	r2, [pc, #108]	; (8002f8c <TIM_OC3_SetConfig+0x100>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d00b      	beq.n	8002f3a <TIM_OC3_SetConfig+0xae>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <TIM_OC3_SetConfig+0x104>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d007      	beq.n	8002f3a <TIM_OC3_SetConfig+0xae>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a19      	ldr	r2, [pc, #100]	; (8002f94 <TIM_OC3_SetConfig+0x108>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d003      	beq.n	8002f3a <TIM_OC3_SetConfig+0xae>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a18      	ldr	r2, [pc, #96]	; (8002f98 <TIM_OC3_SetConfig+0x10c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d113      	bne.n	8002f62 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002f40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002f48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	695b      	ldr	r3, [r3, #20]
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	693a      	ldr	r2, [r7, #16]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	011b      	lsls	r3, r3, #4
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	693a      	ldr	r2, [r7, #16]
 8002f66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	685a      	ldr	r2, [r3, #4]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	621a      	str	r2, [r3, #32]
}
 8002f7c:	bf00      	nop
 8002f7e:	371c      	adds	r7, #28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	40013400 	.word	0x40013400
 8002f90:	40014000 	.word	0x40014000
 8002f94:	40014400 	.word	0x40014400
 8002f98:	40014800 	.word	0x40014800

08002f9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002fca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	021b      	lsls	r3, r3, #8
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	4313      	orrs	r3, r2
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002fea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	031b      	lsls	r3, r3, #12
 8002ff2:	693a      	ldr	r2, [r7, #16]
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	4a18      	ldr	r2, [pc, #96]	; (800305c <TIM_OC4_SetConfig+0xc0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d00f      	beq.n	8003020 <TIM_OC4_SetConfig+0x84>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	4a17      	ldr	r2, [pc, #92]	; (8003060 <TIM_OC4_SetConfig+0xc4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d00b      	beq.n	8003020 <TIM_OC4_SetConfig+0x84>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	4a16      	ldr	r2, [pc, #88]	; (8003064 <TIM_OC4_SetConfig+0xc8>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d007      	beq.n	8003020 <TIM_OC4_SetConfig+0x84>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a15      	ldr	r2, [pc, #84]	; (8003068 <TIM_OC4_SetConfig+0xcc>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d003      	beq.n	8003020 <TIM_OC4_SetConfig+0x84>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a14      	ldr	r2, [pc, #80]	; (800306c <TIM_OC4_SetConfig+0xd0>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d109      	bne.n	8003034 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003026:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	695b      	ldr	r3, [r3, #20]
 800302c:	019b      	lsls	r3, r3, #6
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	68fa      	ldr	r2, [r7, #12]
 800303e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	621a      	str	r2, [r3, #32]
}
 800304e:	bf00      	nop
 8003050:	371c      	adds	r7, #28
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40013400 	.word	0x40013400
 8003064:	40014000 	.word	0x40014000
 8003068:	40014400 	.word	0x40014400
 800306c:	40014800 	.word	0x40014800

08003070 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003070:	b480      	push	{r7}
 8003072:	b087      	sub	sp, #28
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
 8003078:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6a1b      	ldr	r3, [r3, #32]
 800307e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800309e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68fa      	ldr	r2, [r7, #12]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80030b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	041b      	lsls	r3, r3, #16
 80030bc:	693a      	ldr	r2, [r7, #16]
 80030be:	4313      	orrs	r3, r2
 80030c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a17      	ldr	r2, [pc, #92]	; (8003124 <TIM_OC5_SetConfig+0xb4>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00f      	beq.n	80030ea <TIM_OC5_SetConfig+0x7a>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4a16      	ldr	r2, [pc, #88]	; (8003128 <TIM_OC5_SetConfig+0xb8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00b      	beq.n	80030ea <TIM_OC5_SetConfig+0x7a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	4a15      	ldr	r2, [pc, #84]	; (800312c <TIM_OC5_SetConfig+0xbc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d007      	beq.n	80030ea <TIM_OC5_SetConfig+0x7a>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	4a14      	ldr	r2, [pc, #80]	; (8003130 <TIM_OC5_SetConfig+0xc0>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d003      	beq.n	80030ea <TIM_OC5_SetConfig+0x7a>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a13      	ldr	r2, [pc, #76]	; (8003134 <TIM_OC5_SetConfig+0xc4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d109      	bne.n	80030fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	695b      	ldr	r3, [r3, #20]
 80030f6:	021b      	lsls	r3, r3, #8
 80030f8:	697a      	ldr	r2, [r7, #20]
 80030fa:	4313      	orrs	r3, r2
 80030fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68fa      	ldr	r2, [r7, #12]
 8003108:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685a      	ldr	r2, [r3, #4]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	621a      	str	r2, [r3, #32]
}
 8003118:	bf00      	nop
 800311a:	371c      	adds	r7, #28
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	40012c00 	.word	0x40012c00
 8003128:	40013400 	.word	0x40013400
 800312c:	40014000 	.word	0x40014000
 8003130:	40014400 	.word	0x40014400
 8003134:	40014800 	.word	0x40014800

08003138 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003138:	b480      	push	{r7}
 800313a:	b087      	sub	sp, #28
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800315e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003166:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800316a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800317e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	051b      	lsls	r3, r3, #20
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a18      	ldr	r2, [pc, #96]	; (80031f0 <TIM_OC6_SetConfig+0xb8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00f      	beq.n	80031b4 <TIM_OC6_SetConfig+0x7c>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a17      	ldr	r2, [pc, #92]	; (80031f4 <TIM_OC6_SetConfig+0xbc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d00b      	beq.n	80031b4 <TIM_OC6_SetConfig+0x7c>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a16      	ldr	r2, [pc, #88]	; (80031f8 <TIM_OC6_SetConfig+0xc0>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d007      	beq.n	80031b4 <TIM_OC6_SetConfig+0x7c>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a15      	ldr	r2, [pc, #84]	; (80031fc <TIM_OC6_SetConfig+0xc4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d003      	beq.n	80031b4 <TIM_OC6_SetConfig+0x7c>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a14      	ldr	r2, [pc, #80]	; (8003200 <TIM_OC6_SetConfig+0xc8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d109      	bne.n	80031c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	695b      	ldr	r3, [r3, #20]
 80031c0:	029b      	lsls	r3, r3, #10
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	697a      	ldr	r2, [r7, #20]
 80031cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	621a      	str	r2, [r3, #32]
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40012c00 	.word	0x40012c00
 80031f4:	40013400 	.word	0x40013400
 80031f8:	40014000 	.word	0x40014000
 80031fc:	40014400 	.word	0x40014400
 8003200:	40014800 	.word	0x40014800

08003204 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b086      	sub	sp, #24
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800320e:	2300      	movs	r3, #0
 8003210:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003220:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4313      	orrs	r3, r2
 800322a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003232:	f023 0307 	bic.w	r3, r3, #7
 8003236:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	2b70      	cmp	r3, #112	; 0x70
 8003250:	d01a      	beq.n	8003288 <TIM_SlaveTimer_SetConfig+0x84>
 8003252:	2b70      	cmp	r3, #112	; 0x70
 8003254:	d860      	bhi.n	8003318 <TIM_SlaveTimer_SetConfig+0x114>
 8003256:	2b60      	cmp	r3, #96	; 0x60
 8003258:	d054      	beq.n	8003304 <TIM_SlaveTimer_SetConfig+0x100>
 800325a:	2b60      	cmp	r3, #96	; 0x60
 800325c:	d85c      	bhi.n	8003318 <TIM_SlaveTimer_SetConfig+0x114>
 800325e:	2b50      	cmp	r3, #80	; 0x50
 8003260:	d046      	beq.n	80032f0 <TIM_SlaveTimer_SetConfig+0xec>
 8003262:	2b50      	cmp	r3, #80	; 0x50
 8003264:	d858      	bhi.n	8003318 <TIM_SlaveTimer_SetConfig+0x114>
 8003266:	2b40      	cmp	r3, #64	; 0x40
 8003268:	d019      	beq.n	800329e <TIM_SlaveTimer_SetConfig+0x9a>
 800326a:	2b40      	cmp	r3, #64	; 0x40
 800326c:	d854      	bhi.n	8003318 <TIM_SlaveTimer_SetConfig+0x114>
 800326e:	2b30      	cmp	r3, #48	; 0x30
 8003270:	d055      	beq.n	800331e <TIM_SlaveTimer_SetConfig+0x11a>
 8003272:	2b30      	cmp	r3, #48	; 0x30
 8003274:	d850      	bhi.n	8003318 <TIM_SlaveTimer_SetConfig+0x114>
 8003276:	2b20      	cmp	r3, #32
 8003278:	d051      	beq.n	800331e <TIM_SlaveTimer_SetConfig+0x11a>
 800327a:	2b20      	cmp	r3, #32
 800327c:	d84c      	bhi.n	8003318 <TIM_SlaveTimer_SetConfig+0x114>
 800327e:	2b00      	cmp	r3, #0
 8003280:	d04d      	beq.n	800331e <TIM_SlaveTimer_SetConfig+0x11a>
 8003282:	2b10      	cmp	r3, #16
 8003284:	d04b      	beq.n	800331e <TIM_SlaveTimer_SetConfig+0x11a>
 8003286:	e047      	b.n	8003318 <TIM_SlaveTimer_SetConfig+0x114>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	68d9      	ldr	r1, [r3, #12]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	689a      	ldr	r2, [r3, #8]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	691b      	ldr	r3, [r3, #16]
 8003298:	f000 f8c1 	bl	800341e <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 800329c:	e040      	b.n	8003320 <TIM_SlaveTimer_SetConfig+0x11c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b05      	cmp	r3, #5
 80032a4:	d101      	bne.n	80032aa <TIM_SlaveTimer_SetConfig+0xa6>
      {
        return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e03b      	b.n	8003322 <TIM_SlaveTimer_SetConfig+0x11e>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a1a      	ldr	r2, [r3, #32]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	699b      	ldr	r3, [r3, #24]
 80032c8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032d0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	011b      	lsls	r3, r3, #4
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	4313      	orrs	r3, r2
 80032dc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68ba      	ldr	r2, [r7, #8]
 80032e4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	68fa      	ldr	r2, [r7, #12]
 80032ec:	621a      	str	r2, [r3, #32]
      break;
 80032ee:	e017      	b.n	8003320 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6818      	ldr	r0, [r3, #0]
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	6899      	ldr	r1, [r3, #8]
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691b      	ldr	r3, [r3, #16]
 80032fc:	461a      	mov	r2, r3
 80032fe:	f000 f814 	bl	800332a <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003302:	e00d      	b.n	8003320 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	6899      	ldr	r1, [r3, #8]
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	461a      	mov	r2, r3
 8003312:	f000 f839 	bl	8003388 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8003316:	e003      	b.n	8003320 <TIM_SlaveTimer_SetConfig+0x11c>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003318:	2301      	movs	r3, #1
 800331a:	75fb      	strb	r3, [r7, #23]
      break;
 800331c:	e000      	b.n	8003320 <TIM_SlaveTimer_SetConfig+0x11c>
      break;
 800331e:	bf00      	nop
  }

  return status;
 8003320:	7dfb      	ldrb	r3, [r7, #23]
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800332a:	b480      	push	{r7}
 800332c:	b087      	sub	sp, #28
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	60b9      	str	r1, [r7, #8]
 8003334:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f023 0201 	bic.w	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	699b      	ldr	r3, [r3, #24]
 800334c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003354:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	693a      	ldr	r2, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	f023 030a 	bic.w	r3, r3, #10
 8003366:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	693a      	ldr	r2, [r7, #16]
 8003374:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	621a      	str	r2, [r3, #32]
}
 800337c:	bf00      	nop
 800337e:	371c      	adds	r7, #28
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr

08003388 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003388:	b480      	push	{r7}
 800338a:	b087      	sub	sp, #28
 800338c:	af00      	add	r7, sp, #0
 800338e:	60f8      	str	r0, [r7, #12]
 8003390:	60b9      	str	r1, [r7, #8]
 8003392:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f023 0210 	bic.w	r2, r3, #16
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a1b      	ldr	r3, [r3, #32]
 80033aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80033b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	031b      	lsls	r3, r3, #12
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80033c4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80033c6:	68bb      	ldr	r3, [r7, #8]
 80033c8:	011b      	lsls	r3, r3, #4
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	621a      	str	r2, [r3, #32]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b085      	sub	sp, #20
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4313      	orrs	r3, r2
 8003406:	f043 0307 	orr.w	r3, r3, #7
 800340a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	609a      	str	r2, [r3, #8]
}
 8003412:	bf00      	nop
 8003414:	3714      	adds	r7, #20
 8003416:	46bd      	mov	sp, r7
 8003418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341c:	4770      	bx	lr

0800341e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800341e:	b480      	push	{r7}
 8003420:	b087      	sub	sp, #28
 8003422:	af00      	add	r7, sp, #0
 8003424:	60f8      	str	r0, [r7, #12]
 8003426:	60b9      	str	r1, [r7, #8]
 8003428:	607a      	str	r2, [r7, #4]
 800342a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003438:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	021a      	lsls	r2, r3, #8
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	431a      	orrs	r2, r3
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	4313      	orrs	r3, r2
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4313      	orrs	r3, r2
 800344a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	697a      	ldr	r2, [r7, #20]
 8003450:	609a      	str	r2, [r3, #8]
}
 8003452:	bf00      	nop
 8003454:	371c      	adds	r7, #28
 8003456:	46bd      	mov	sp, r7
 8003458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345c:	4770      	bx	lr
	...

08003460 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003460:	b480      	push	{r7}
 8003462:	b085      	sub	sp, #20
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003474:	2302      	movs	r3, #2
 8003476:	e068      	b.n	800354a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2202      	movs	r2, #2
 8003484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a2e      	ldr	r2, [pc, #184]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d004      	beq.n	80034ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a2d      	ldr	r2, [pc, #180]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d108      	bne.n	80034be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80034b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	68fa      	ldr	r2, [r7, #12]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68fa      	ldr	r2, [r7, #12]
 80034d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d01d      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ea:	d018      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1b      	ldr	r2, [pc, #108]	; (8003560 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d013      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1a      	ldr	r2, [pc, #104]	; (8003564 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00e      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a18      	ldr	r2, [pc, #96]	; (8003568 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d009      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a13      	ldr	r2, [pc, #76]	; (800355c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d004      	beq.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a14      	ldr	r2, [pc, #80]	; (800356c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d10c      	bne.n	8003538 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003524:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4313      	orrs	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68ba      	ldr	r2, [r7, #8]
 8003536:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003548:	2300      	movs	r3, #0
}
 800354a:	4618      	mov	r0, r3
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40013400 	.word	0x40013400
 8003560:	40000400 	.word	0x40000400
 8003564:	40000800 	.word	0x40000800
 8003568:	40000c00 	.word	0x40000c00
 800356c:	40014000 	.word	0x40014000

08003570 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800358c:	bf00      	nop
 800358e:	370c      	adds	r7, #12
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr

08003598 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <init_buffer>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// Fill buffers with testing stuff
void init_buffer() {
 80035ac:	b580      	push	{r7, lr}
 80035ae:	b086      	sub	sp, #24
 80035b0:	af00      	add	r7, sp, #0
  // Allocate buffers
  // Continuous memory alloc
  uint8_t* tmp_buffer  = (uint8_t*) malloc(sizeof(uint8_t) * 800 * 449);
 80035b2:	4846      	ldr	r0, [pc, #280]	; (80036cc <init_buffer+0x120>)
 80035b4:	f000 fd2e 	bl	8004014 <malloc>
 80035b8:	4603      	mov	r3, r0
 80035ba:	60bb      	str	r3, [r7, #8]
  uint8_t* tmp2_buffer = (uint8_t*) malloc(sizeof(uint8_t) * 800 * 449);
 80035bc:	4843      	ldr	r0, [pc, #268]	; (80036cc <init_buffer+0x120>)
 80035be:	f000 fd29 	bl	8004014 <malloc>
 80035c2:	4603      	mov	r3, r0
 80035c4:	607b      	str	r3, [r7, #4]

  frame_buffer = (uint8_t**) malloc(sizeof(uint8_t*) * 449);
 80035c6:	f240 7004 	movw	r0, #1796	; 0x704
 80035ca:	f000 fd23 	bl	8004014 <malloc>
 80035ce:	4603      	mov	r3, r0
 80035d0:	461a      	mov	r2, r3
 80035d2:	4b3f      	ldr	r3, [pc, #252]	; (80036d0 <init_buffer+0x124>)
 80035d4:	601a      	str	r2, [r3, #0]
  true_buffer  = (uint8_t**) malloc(sizeof(uint8_t*) * 449);
 80035d6:	f240 7004 	movw	r0, #1796	; 0x704
 80035da:	f000 fd1b 	bl	8004014 <malloc>
 80035de:	4603      	mov	r3, r0
 80035e0:	461a      	mov	r2, r3
 80035e2:	4b3c      	ldr	r3, [pc, #240]	; (80036d4 <init_buffer+0x128>)
 80035e4:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < 449; i++) {
 80035e6:	2300      	movs	r3, #0
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e01e      	b.n	800362a <init_buffer+0x7e>
	  // Points to place in continuous location
	  frame_buffer[i] = tmp_buffer  + i*800;
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	f44f 7248 	mov.w	r2, #800	; 0x320
 80035f2:	fb02 f303 	mul.w	r3, r2, r3
 80035f6:	4619      	mov	r1, r3
 80035f8:	4b35      	ldr	r3, [pc, #212]	; (80036d0 <init_buffer+0x124>)
 80035fa:	681a      	ldr	r2, [r3, #0]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	440a      	add	r2, r1
 8003606:	601a      	str	r2, [r3, #0]
	  true_buffer[i]  = tmp2_buffer + i*800;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	4619      	mov	r1, r3
 8003614:	4b2f      	ldr	r3, [pc, #188]	; (80036d4 <init_buffer+0x128>)
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	687a      	ldr	r2, [r7, #4]
 8003620:	440a      	add	r2, r1
 8003622:	601a      	str	r2, [r3, #0]
  for(int i = 0; i < 449; i++) {
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	3301      	adds	r3, #1
 8003628:	617b      	str	r3, [r7, #20]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 8003630:	dddc      	ble.n	80035ec <init_buffer+0x40>
  }


  // Fill them with data, start with increasing grayscale (and decreasing for back)
  for(int i = 0; i < 449; i++) {
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	e03f      	b.n	80036b8 <init_buffer+0x10c>
	  for(int j = 0; j < 800; j++) {
 8003638:	2300      	movs	r3, #0
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	e035      	b.n	80036aa <init_buffer+0xfe>
		  if (j >= horiz_size || i >= vert_size) {
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8003644:	da03      	bge.n	800364e <init_buffer+0xa2>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 800364c:	db14      	blt.n	8003678 <init_buffer+0xcc>
			  frame_buffer[i][j] = (uint8_t) 0;
 800364e:	4b20      	ldr	r3, [pc, #128]	; (80036d0 <init_buffer+0x124>)
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	4413      	add	r3, r2
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	4413      	add	r3, r2
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
			  true_buffer[i][j] = (uint8_t) 0;
 8003662:	4b1c      	ldr	r3, [pc, #112]	; (80036d4 <init_buffer+0x128>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	4413      	add	r3, r2
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	4413      	add	r3, r2
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
 8003676:	e015      	b.n	80036a4 <init_buffer+0xf8>
		  } else {
			  frame_buffer[i][j] = (uint8_t) j;
 8003678:	4b15      	ldr	r3, [pc, #84]	; (80036d0 <init_buffer+0x124>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	4413      	add	r3, r2
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	701a      	strb	r2, [r3, #0]
			  true_buffer[i][j] = (uint8_t) j;
 800368e:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <init_buffer+0x128>)
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	4413      	add	r3, r2
 8003698:	681a      	ldr	r2, [r3, #0]
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4413      	add	r3, r2
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	b2d2      	uxtb	r2, r2
 80036a2:	701a      	strb	r2, [r3, #0]
	  for(int j = 0; j < 800; j++) {
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	3301      	adds	r3, #1
 80036a8:	60fb      	str	r3, [r7, #12]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80036b0:	dbc5      	blt.n	800363e <init_buffer+0x92>
  for(int i = 0; i < 449; i++) {
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	3301      	adds	r3, #1
 80036b6:	613b      	str	r3, [r7, #16]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f5b3 7fe0 	cmp.w	r3, #448	; 0x1c0
 80036be:	ddbb      	ble.n	8003638 <init_buffer+0x8c>
		  }

	  }
  }
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	00057b20 	.word	0x00057b20
 80036d0:	200001ac 	.word	0x200001ac
 80036d4:	200001a8 	.word	0x200001a8

080036d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80036de:	f7fc fd8d 	bl	80001fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80036e2:	f000 f841 	bl	8003768 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80036e6:	f000 fa35 	bl	8003b54 <MX_GPIO_Init>
  MX_DMA_Init();
 80036ea:	f000 fa09 	bl	8003b00 <MX_DMA_Init>
  MX_DAC1_Init();
 80036ee:	f000 f88d 	bl	800380c <MX_DAC1_Init>

  MX_TIM4_Init();
 80036f2:	f000 f9b7 	bl	8003a64 <MX_TIM4_Init>
  MX_TIM3_Init();
 80036f6:	f000 f935 	bl	8003964 <MX_TIM3_Init>
  MX_TIM2_Init();
 80036fa:	f000 f8bb 	bl	8003874 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // Fill the frame buffer
  init_buffer();
 80036fe:	f7ff ff55 	bl	80035ac <init_buffer>
  HAL_GPIO_WritePin(Horiz_Synch_GPIO_Port, Horiz_Synch_Pin, GPIO_PIN_SET);
 8003702:	2201      	movs	r2, #1
 8003704:	2108      	movs	r1, #8
 8003706:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800370a:	f7fd fdfb 	bl	8001304 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
 800370e:	2201      	movs	r2, #1
 8003710:	2104      	movs	r1, #4
 8003712:	480e      	ldr	r0, [pc, #56]	; (800374c <main+0x74>)
 8003714:	f7fd fdf6 	bl	8001304 <HAL_GPIO_WritePin>
  if (HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *) frame_buffer[0], 800*449, DAC_ALIGN_8B_R) != HAL_OK) {
 8003718:	4b0d      	ldr	r3, [pc, #52]	; (8003750 <main+0x78>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	2308      	movs	r3, #8
 8003720:	9300      	str	r3, [sp, #0]
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <main+0x7c>)
 8003724:	2100      	movs	r1, #0
 8003726:	480c      	ldr	r0, [pc, #48]	; (8003758 <main+0x80>)
 8003728:	f7fc ff34 	bl	8000594 <HAL_DAC_Start_DMA>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d001      	beq.n	8003736 <main+0x5e>
	  Error_Handler();
 8003732:	f000 fa57 	bl	8003be4 <Error_Handler>
  }
  HAL_TIM_Base_Start(&htim2);	// start slave first.
 8003736:	4809      	ldr	r0, [pc, #36]	; (800375c <main+0x84>)
 8003738:	f7fe fdc4 	bl	80022c4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);	// start slave first.
 800373c:	4808      	ldr	r0, [pc, #32]	; (8003760 <main+0x88>)
 800373e:	f7fe fdc1 	bl	80022c4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);	// start master timer.
 8003742:	4808      	ldr	r0, [pc, #32]	; (8003764 <main+0x8c>)
 8003744:	f7fe fdbe 	bl	80022c4 <HAL_TIM_Base_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 8003748:	e7fe      	b.n	8003748 <main+0x70>
 800374a:	bf00      	nop
 800374c:	48000400 	.word	0x48000400
 8003750:	200001ac 	.word	0x200001ac
 8003754:	00057b20 	.word	0x00057b20
 8003758:	200000e8 	.word	0x200000e8
 800375c:	200001b0 	.word	0x200001b0
 8003760:	2000015c 	.word	0x2000015c
 8003764:	2000009c 	.word	0x2000009c

08003768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b096      	sub	sp, #88	; 0x58
 800376c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800376e:	f107 0314 	add.w	r3, r7, #20
 8003772:	2244      	movs	r2, #68	; 0x44
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fc54 	bl	8004024 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800377c:	463b      	mov	r3, r7
 800377e:	2200      	movs	r2, #0
 8003780:	601a      	str	r2, [r3, #0]
 8003782:	605a      	str	r2, [r3, #4]
 8003784:	609a      	str	r2, [r3, #8]
 8003786:	60da      	str	r2, [r3, #12]
 8003788:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800378a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800378e:	f7fd fdf1 	bl	8001374 <HAL_PWREx_ControlVoltageScaling>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d001      	beq.n	800379c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003798:	f000 fa24 	bl	8003be4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800379c:	2310      	movs	r3, #16
 800379e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80037a0:	2301      	movs	r3, #1
 80037a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80037a4:	2300      	movs	r3, #0
 80037a6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80037a8:	2360      	movs	r3, #96	; 0x60
 80037aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037ac:	2302      	movs	r3, #2
 80037ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80037b0:	2301      	movs	r3, #1
 80037b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80037b4:	2301      	movs	r3, #1
 80037b6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80037b8:	2328      	movs	r3, #40	; 0x28
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037bc:	2302      	movs	r3, #2
 80037be:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80037c0:	2302      	movs	r3, #2
 80037c2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80037c4:	2302      	movs	r3, #2
 80037c6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c8:	f107 0314 	add.w	r3, r7, #20
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fd fe75 	bl	80014bc <HAL_RCC_OscConfig>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <SystemClock_Config+0x74>
  {
    Error_Handler();
 80037d8:	f000 fa04 	bl	8003be4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037dc:	230f      	movs	r3, #15
 80037de:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037e0:	2303      	movs	r3, #3
 80037e2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80037e8:	2300      	movs	r3, #0
 80037ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037ec:	2300      	movs	r3, #0
 80037ee:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80037f0:	463b      	mov	r3, r7
 80037f2:	2103      	movs	r1, #3
 80037f4:	4618      	mov	r0, r3
 80037f6:	f7fe fa87 	bl	8001d08 <HAL_RCC_ClockConfig>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003800:	f000 f9f0 	bl	8003be4 <Error_Handler>
  }
}
 8003804:	bf00      	nop
 8003806:	3758      	adds	r7, #88	; 0x58
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b08a      	sub	sp, #40	; 0x28
 8003810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003812:	463b      	mov	r3, r7
 8003814:	2228      	movs	r2, #40	; 0x28
 8003816:	2100      	movs	r1, #0
 8003818:	4618      	mov	r0, r3
 800381a:	f000 fc03 	bl	8004024 <memset>
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800381e:	4b13      	ldr	r3, [pc, #76]	; (800386c <MX_DAC1_Init+0x60>)
 8003820:	4a13      	ldr	r2, [pc, #76]	; (8003870 <MX_DAC1_Init+0x64>)
 8003822:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003824:	4811      	ldr	r0, [pc, #68]	; (800386c <MX_DAC1_Init+0x60>)
 8003826:	f7fc fe92 	bl	800054e <HAL_DAC_Init>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003830:	f000 f9d8 	bl	8003be4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003834:	2300      	movs	r3, #0
 8003836:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 8003838:	230e      	movs	r3, #14
 800383a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800383c:	2300      	movs	r3, #0
 800383e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003840:	2300      	movs	r3, #0
 8003842:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003844:	2300      	movs	r3, #0
 8003846:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800384c:	463b      	mov	r3, r7
 800384e:	2200      	movs	r2, #0
 8003850:	4619      	mov	r1, r3
 8003852:	4806      	ldr	r0, [pc, #24]	; (800386c <MX_DAC1_Init+0x60>)
 8003854:	f7fc ff88 	bl	8000768 <HAL_DAC_ConfigChannel>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d001      	beq.n	8003862 <MX_DAC1_Init+0x56>
  {
    Error_Handler();
 800385e:	f000 f9c1 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */
  /* USER CODE END DAC1_Init 2 */

}
 8003862:	bf00      	nop
 8003864:	3728      	adds	r7, #40	; 0x28
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	200000e8 	.word	0x200000e8
 8003870:	40007400 	.word	0x40007400

08003874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b090      	sub	sp, #64	; 0x40
 8003878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800387a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800387e:	2200      	movs	r2, #0
 8003880:	601a      	str	r2, [r3, #0]
 8003882:	605a      	str	r2, [r3, #4]
 8003884:	609a      	str	r2, [r3, #8]
 8003886:	60da      	str	r2, [r3, #12]
 8003888:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800388a:	f107 0320 	add.w	r3, r7, #32
 800388e:	2200      	movs	r2, #0
 8003890:	601a      	str	r2, [r3, #0]
 8003892:	605a      	str	r2, [r3, #4]
 8003894:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003896:	1d3b      	adds	r3, r7, #4
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	611a      	str	r2, [r3, #16]
 80038a4:	615a      	str	r2, [r3, #20]
 80038a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80038a8:	4b2d      	ldr	r3, [pc, #180]	; (8003960 <MX_TIM2_Init+0xec>)
 80038aa:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80038ae:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 15;
 80038b0:	4b2b      	ldr	r3, [pc, #172]	; (8003960 <MX_TIM2_Init+0xec>)
 80038b2:	220f      	movs	r2, #15
 80038b4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038b6:	4b2a      	ldr	r3, [pc, #168]	; (8003960 <MX_TIM2_Init+0xec>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50;
 80038bc:	4b28      	ldr	r3, [pc, #160]	; (8003960 <MX_TIM2_Init+0xec>)
 80038be:	2232      	movs	r2, #50	; 0x32
 80038c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80038c2:	4b27      	ldr	r3, [pc, #156]	; (8003960 <MX_TIM2_Init+0xec>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <MX_TIM2_Init+0xec>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80038ce:	4824      	ldr	r0, [pc, #144]	; (8003960 <MX_TIM2_Init+0xec>)
 80038d0:	f7fe fca0 	bl	8002214 <HAL_TIM_Base_Init>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80038da:	f000 f983 	bl	8003be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80038de:	4820      	ldr	r0, [pc, #128]	; (8003960 <MX_TIM2_Init+0xec>)
 80038e0:	f7fe fd58 	bl	8002394 <HAL_TIM_PWM_Init>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80038ea:	f000 f97b 	bl	8003be4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80038ee:	2306      	movs	r3, #6
 80038f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80038f2:	2330      	movs	r3, #48	; 0x30
 80038f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80038f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038fa:	4619      	mov	r1, r3
 80038fc:	4818      	ldr	r0, [pc, #96]	; (8003960 <MX_TIM2_Init+0xec>)
 80038fe:	f7ff f8a6 	bl	8002a4e <HAL_TIM_SlaveConfigSynchro>
 8003902:	4603      	mov	r3, r0
 8003904:	2b00      	cmp	r3, #0
 8003906:	d001      	beq.n	800390c <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 8003908:	f000 f96c 	bl	8003be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800390c:	2300      	movs	r3, #0
 800390e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003910:	2300      	movs	r3, #0
 8003912:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003914:	f107 0320 	add.w	r3, r7, #32
 8003918:	4619      	mov	r1, r3
 800391a:	4811      	ldr	r0, [pc, #68]	; (8003960 <MX_TIM2_Init+0xec>)
 800391c:	f7ff fda0 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8003926:	f000 f95d 	bl	8003be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800392a:	2360      	movs	r3, #96	; 0x60
 800392c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 44;
 800392e:	232c      	movs	r3, #44	; 0x2c
 8003930:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003932:	2300      	movs	r3, #0
 8003934:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003936:	2300      	movs	r3, #0
 8003938:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800393a:	1d3b      	adds	r3, r7, #4
 800393c:	220c      	movs	r2, #12
 800393e:	4619      	mov	r1, r3
 8003940:	4807      	ldr	r0, [pc, #28]	; (8003960 <MX_TIM2_Init+0xec>)
 8003942:	f7fe fea7 	bl	8002694 <HAL_TIM_PWM_ConfigChannel>
 8003946:	4603      	mov	r3, r0
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 800394c:	f000 f94a 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8003950:	4803      	ldr	r0, [pc, #12]	; (8003960 <MX_TIM2_Init+0xec>)
 8003952:	f000 fa2b 	bl	8003dac <HAL_TIM_MspPostInit>

}
 8003956:	bf00      	nop
 8003958:	3740      	adds	r7, #64	; 0x40
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	200001b0 	.word	0x200001b0

08003964 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b090      	sub	sp, #64	; 0x40
 8003968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800396a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800396e:	2200      	movs	r2, #0
 8003970:	601a      	str	r2, [r3, #0]
 8003972:	605a      	str	r2, [r3, #4]
 8003974:	609a      	str	r2, [r3, #8]
 8003976:	60da      	str	r2, [r3, #12]
 8003978:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800397a:	f107 0320 	add.w	r3, r7, #32
 800397e:	2200      	movs	r2, #0
 8003980:	601a      	str	r2, [r3, #0]
 8003982:	605a      	str	r2, [r3, #4]
 8003984:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003986:	1d3b      	adds	r3, r7, #4
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
 800398c:	605a      	str	r2, [r3, #4]
 800398e:	609a      	str	r2, [r3, #8]
 8003990:	60da      	str	r2, [r3, #12]
 8003992:	611a      	str	r2, [r3, #16]
 8003994:	615a      	str	r2, [r3, #20]
 8003996:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003998:	4b30      	ldr	r3, [pc, #192]	; (8003a5c <MX_TIM3_Init+0xf8>)
 800399a:	4a31      	ldr	r2, [pc, #196]	; (8003a60 <MX_TIM3_Init+0xfc>)
 800399c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 15;
 800399e:	4b2f      	ldr	r3, [pc, #188]	; (8003a5c <MX_TIM3_Init+0xf8>)
 80039a0:	220f      	movs	r2, #15
 80039a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039a4:	4b2d      	ldr	r3, [pc, #180]	; (8003a5c <MX_TIM3_Init+0xf8>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50;
 80039aa:	4b2c      	ldr	r3, [pc, #176]	; (8003a5c <MX_TIM3_Init+0xf8>)
 80039ac:	2232      	movs	r2, #50	; 0x32
 80039ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80039b0:	4b2a      	ldr	r3, [pc, #168]	; (8003a5c <MX_TIM3_Init+0xf8>)
 80039b2:	2200      	movs	r2, #0
 80039b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039b6:	4b29      	ldr	r3, [pc, #164]	; (8003a5c <MX_TIM3_Init+0xf8>)
 80039b8:	2200      	movs	r2, #0
 80039ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80039bc:	4827      	ldr	r0, [pc, #156]	; (8003a5c <MX_TIM3_Init+0xf8>)
 80039be:	f7fe fc29 	bl	8002214 <HAL_TIM_Base_Init>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80039c8:	f000 f90c 	bl	8003be4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80039cc:	4823      	ldr	r0, [pc, #140]	; (8003a5c <MX_TIM3_Init+0xf8>)
 80039ce:	f7fe fce1 	bl	8002394 <HAL_TIM_PWM_Init>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80039d8:	f000 f904 	bl	8003be4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80039dc:	2306      	movs	r3, #6
 80039de:	62fb      	str	r3, [r7, #44]	; 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR3;
 80039e0:	2330      	movs	r3, #48	; 0x30
 80039e2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80039e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80039e8:	4619      	mov	r1, r3
 80039ea:	481c      	ldr	r0, [pc, #112]	; (8003a5c <MX_TIM3_Init+0xf8>)
 80039ec:	f7ff f82f 	bl	8002a4e <HAL_TIM_SlaveConfigSynchro>
 80039f0:	4603      	mov	r3, r0
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80039f6:	f000 f8f5 	bl	8003be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80039fa:	2300      	movs	r3, #0
 80039fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039fe:	2300      	movs	r3, #0
 8003a00:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003a02:	f107 0320 	add.w	r3, r7, #32
 8003a06:	4619      	mov	r1, r3
 8003a08:	4814      	ldr	r0, [pc, #80]	; (8003a5c <MX_TIM3_Init+0xf8>)
 8003a0a:	f7ff fd29 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d001      	beq.n	8003a18 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8003a14:	f000 f8e6 	bl	8003be4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a18:	2360      	movs	r3, #96	; 0x60
 8003a1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2;
 8003a1c:	2302      	movs	r3, #2
 8003a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a24:	2300      	movs	r3, #0
 8003a26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003a28:	1d3b      	adds	r3, r7, #4
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	480b      	ldr	r0, [pc, #44]	; (8003a5c <MX_TIM3_Init+0xf8>)
 8003a30:	f7fe fe30 	bl	8002694 <HAL_TIM_PWM_ConfigChannel>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8003a3a:	f000 f8d3 	bl	8003be4 <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8003a3e:	4b07      	ldr	r3, [pc, #28]	; (8003a5c <MX_TIM3_Init+0xf8>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	699a      	ldr	r2, [r3, #24]
 8003a44:	4b05      	ldr	r3, [pc, #20]	; (8003a5c <MX_TIM3_Init+0xf8>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0208 	bic.w	r2, r2, #8
 8003a4c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8003a4e:	4803      	ldr	r0, [pc, #12]	; (8003a5c <MX_TIM3_Init+0xf8>)
 8003a50:	f000 f9ac 	bl	8003dac <HAL_TIM_MspPostInit>

}
 8003a54:	bf00      	nop
 8003a56:	3740      	adds	r7, #64	; 0x40
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	2000015c 	.word	0x2000015c
 8003a60:	40000400 	.word	0x40000400

08003a64 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b088      	sub	sp, #32
 8003a68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a6a:	f107 0310 	add.w	r3, r7, #16
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	609a      	str	r2, [r3, #8]
 8003a76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a78:	1d3b      	adds	r3, r7, #4
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	601a      	str	r2, [r3, #0]
 8003a7e:	605a      	str	r2, [r3, #4]
 8003a80:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003a82:	4b1d      	ldr	r3, [pc, #116]	; (8003af8 <MX_TIM4_Init+0x94>)
 8003a84:	4a1d      	ldr	r2, [pc, #116]	; (8003afc <MX_TIM4_Init+0x98>)
 8003a86:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003a88:	4b1b      	ldr	r3, [pc, #108]	; (8003af8 <MX_TIM4_Init+0x94>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a8e:	4b1a      	ldr	r3, [pc, #104]	; (8003af8 <MX_TIM4_Init+0x94>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 3;
 8003a94:	4b18      	ldr	r3, [pc, #96]	; (8003af8 <MX_TIM4_Init+0x94>)
 8003a96:	2203      	movs	r2, #3
 8003a98:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a9a:	4b17      	ldr	r3, [pc, #92]	; (8003af8 <MX_TIM4_Init+0x94>)
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003aa0:	4b15      	ldr	r3, [pc, #84]	; (8003af8 <MX_TIM4_Init+0x94>)
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003aa6:	4814      	ldr	r0, [pc, #80]	; (8003af8 <MX_TIM4_Init+0x94>)
 8003aa8:	f7fe fbb4 	bl	8002214 <HAL_TIM_Base_Init>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d001      	beq.n	8003ab6 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8003ab2:	f000 f897 	bl	8003be4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003aba:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003abc:	f107 0310 	add.w	r3, r7, #16
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	480d      	ldr	r0, [pc, #52]	; (8003af8 <MX_TIM4_Init+0x94>)
 8003ac4:	f7fe fefa 	bl	80028bc <HAL_TIM_ConfigClockSource>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8003ace:	f000 f889 	bl	8003be4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003ad2:	2320      	movs	r3, #32
 8003ad4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003ada:	1d3b      	adds	r3, r7, #4
 8003adc:	4619      	mov	r1, r3
 8003ade:	4806      	ldr	r0, [pc, #24]	; (8003af8 <MX_TIM4_Init+0x94>)
 8003ae0:	f7ff fcbe 	bl	8003460 <HAL_TIMEx_MasterConfigSynchronization>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8003aea:	f000 f87b 	bl	8003be4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003aee:	bf00      	nop
 8003af0:	3720      	adds	r7, #32
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}
 8003af6:	bf00      	nop
 8003af8:	2000009c 	.word	0x2000009c
 8003afc:	40000800 	.word	0x40000800

08003b00 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8003b06:	4b12      	ldr	r3, [pc, #72]	; (8003b50 <MX_DMA_Init+0x50>)
 8003b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b0a:	4a11      	ldr	r2, [pc, #68]	; (8003b50 <MX_DMA_Init+0x50>)
 8003b0c:	f043 0304 	orr.w	r3, r3, #4
 8003b10:	6493      	str	r3, [r2, #72]	; 0x48
 8003b12:	4b0f      	ldr	r3, [pc, #60]	; (8003b50 <MX_DMA_Init+0x50>)
 8003b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	607b      	str	r3, [r7, #4]
 8003b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003b1e:	4b0c      	ldr	r3, [pc, #48]	; (8003b50 <MX_DMA_Init+0x50>)
 8003b20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b22:	4a0b      	ldr	r2, [pc, #44]	; (8003b50 <MX_DMA_Init+0x50>)
 8003b24:	f043 0301 	orr.w	r3, r3, #1
 8003b28:	6493      	str	r3, [r2, #72]	; 0x48
 8003b2a:	4b09      	ldr	r3, [pc, #36]	; (8003b50 <MX_DMA_Init+0x50>)
 8003b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	603b      	str	r3, [r7, #0]
 8003b34:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8003b36:	2200      	movs	r2, #0
 8003b38:	2100      	movs	r1, #0
 8003b3a:	200b      	movs	r0, #11
 8003b3c:	f7fc fcd1 	bl	80004e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003b40:	200b      	movs	r0, #11
 8003b42:	f7fc fcea 	bl	800051a <HAL_NVIC_EnableIRQ>

}
 8003b46:	bf00      	nop
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40021000 	.word	0x40021000

08003b54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b088      	sub	sp, #32
 8003b58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b5a:	f107 030c 	add.w	r3, r7, #12
 8003b5e:	2200      	movs	r2, #0
 8003b60:	601a      	str	r2, [r3, #0]
 8003b62:	605a      	str	r2, [r3, #4]
 8003b64:	609a      	str	r2, [r3, #8]
 8003b66:	60da      	str	r2, [r3, #12]
 8003b68:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b6a:	4b17      	ldr	r3, [pc, #92]	; (8003bc8 <MX_GPIO_Init+0x74>)
 8003b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b6e:	4a16      	ldr	r2, [pc, #88]	; (8003bc8 <MX_GPIO_Init+0x74>)
 8003b70:	f043 0301 	orr.w	r3, r3, #1
 8003b74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b76:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <MX_GPIO_Init+0x74>)
 8003b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b7a:	f003 0301 	and.w	r3, r3, #1
 8003b7e:	60bb      	str	r3, [r7, #8]
 8003b80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b82:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <MX_GPIO_Init+0x74>)
 8003b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b86:	4a10      	ldr	r2, [pc, #64]	; (8003bc8 <MX_GPIO_Init+0x74>)
 8003b88:	f043 0302 	orr.w	r3, r3, #2
 8003b8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b8e:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <MX_GPIO_Init+0x74>)
 8003b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	607b      	str	r3, [r7, #4]
 8003b98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_RESET);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2104      	movs	r1, #4
 8003b9e:	480b      	ldr	r0, [pc, #44]	; (8003bcc <MX_GPIO_Init+0x78>)
 8003ba0:	f7fd fbb0 	bl	8001304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Vert_Synch_Pin */
  GPIO_InitStruct.Pin = Vert_Synch_Pin;
 8003ba4:	2304      	movs	r3, #4
 8003ba6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bac:	2300      	movs	r3, #0
 8003bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Vert_Synch_GPIO_Port, &GPIO_InitStruct);
 8003bb4:	f107 030c 	add.w	r3, r7, #12
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4804      	ldr	r0, [pc, #16]	; (8003bcc <MX_GPIO_Init+0x78>)
 8003bbc:	f7fd fa10 	bl	8000fe0 <HAL_GPIO_Init>

}
 8003bc0:	bf00      	nop
 8003bc2:	3720      	adds	r7, #32
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	48000400 	.word	0x48000400

08003bd0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

//NOTE: This will not work  once the resolution is changed
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
//		} else {
//			//HAL_GPIO_WritePin(Vert_Synch_GPIO_Port, Vert_Synch_Pin, GPIO_PIN_SET);
//			Vert_Synch_GPIO_Port->BSRR = (uint32_t)Vert_Synch_Pin;
//		}
//	}
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003be8:	b672      	cpsid	i
}
 8003bea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003bec:	e7fe      	b.n	8003bec <Error_Handler+0x8>
	...

08003bf0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bf6:	4b0f      	ldr	r3, [pc, #60]	; (8003c34 <HAL_MspInit+0x44>)
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfa:	4a0e      	ldr	r2, [pc, #56]	; (8003c34 <HAL_MspInit+0x44>)
 8003bfc:	f043 0301 	orr.w	r3, r3, #1
 8003c00:	6613      	str	r3, [r2, #96]	; 0x60
 8003c02:	4b0c      	ldr	r3, [pc, #48]	; (8003c34 <HAL_MspInit+0x44>)
 8003c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	607b      	str	r3, [r7, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c0e:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <HAL_MspInit+0x44>)
 8003c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c12:	4a08      	ldr	r2, [pc, #32]	; (8003c34 <HAL_MspInit+0x44>)
 8003c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c18:	6593      	str	r3, [r2, #88]	; 0x58
 8003c1a:	4b06      	ldr	r3, [pc, #24]	; (8003c34 <HAL_MspInit+0x44>)
 8003c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c26:	bf00      	nop
 8003c28:	370c      	adds	r7, #12
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	40021000 	.word	0x40021000

08003c38 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c40:	f107 0314 	add.w	r3, r7, #20
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	609a      	str	r2, [r3, #8]
 8003c4c:	60da      	str	r2, [r3, #12]
 8003c4e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a2b      	ldr	r2, [pc, #172]	; (8003d04 <HAL_DAC_MspInit+0xcc>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d14f      	bne.n	8003cfa <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003c5a:	4b2b      	ldr	r3, [pc, #172]	; (8003d08 <HAL_DAC_MspInit+0xd0>)
 8003c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c5e:	4a2a      	ldr	r2, [pc, #168]	; (8003d08 <HAL_DAC_MspInit+0xd0>)
 8003c60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c64:	6593      	str	r3, [r2, #88]	; 0x58
 8003c66:	4b28      	ldr	r3, [pc, #160]	; (8003d08 <HAL_DAC_MspInit+0xd0>)
 8003c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c6a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c6e:	613b      	str	r3, [r7, #16]
 8003c70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c72:	4b25      	ldr	r3, [pc, #148]	; (8003d08 <HAL_DAC_MspInit+0xd0>)
 8003c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c76:	4a24      	ldr	r2, [pc, #144]	; (8003d08 <HAL_DAC_MspInit+0xd0>)
 8003c78:	f043 0301 	orr.w	r3, r3, #1
 8003c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c7e:	4b22      	ldr	r3, [pc, #136]	; (8003d08 <HAL_DAC_MspInit+0xd0>)
 8003c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003c8a:	2310      	movs	r3, #16
 8003c8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003c8e:	2303      	movs	r3, #3
 8003c90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c96:	f107 0314 	add.w	r3, r7, #20
 8003c9a:	4619      	mov	r1, r3
 8003c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca0:	f7fd f99e 	bl	8000fe0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8003ca4:	4b19      	ldr	r3, [pc, #100]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003ca6:	4a1a      	ldr	r2, [pc, #104]	; (8003d10 <HAL_DAC_MspInit+0xd8>)
 8003ca8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8003caa:	4b18      	ldr	r3, [pc, #96]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003cac:	2206      	movs	r2, #6
 8003cae:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cb0:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003cb2:	2210      	movs	r2, #16
 8003cb4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cb6:	4b15      	ldr	r3, [pc, #84]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003cbc:	4b13      	ldr	r3, [pc, #76]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003cbe:	2280      	movs	r2, #128	; 0x80
 8003cc0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003cc2:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003cc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cca:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003ccc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cd0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003cd2:	4b0e      	ldr	r3, [pc, #56]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003cd4:	2220      	movs	r2, #32
 8003cd6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003cda:	2200      	movs	r2, #0
 8003cdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003cde:	480b      	ldr	r0, [pc, #44]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003ce0:	f7fc ff0c 	bl	8000afc <HAL_DMA_Init>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8003cea:	f7ff ff7b 	bl	8003be4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a06      	ldr	r2, [pc, #24]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	4a05      	ldr	r2, [pc, #20]	; (8003d0c <HAL_DAC_MspInit+0xd4>)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003cfa:	bf00      	nop
 8003cfc:	3728      	adds	r7, #40	; 0x28
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	40007400 	.word	0x40007400
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	200000fc 	.word	0x200000fc
 8003d10:	40020008 	.word	0x40020008

08003d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b086      	sub	sp, #24
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d24:	d114      	bne.n	8003d50 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003d26:	4b1e      	ldr	r3, [pc, #120]	; (8003da0 <HAL_TIM_Base_MspInit+0x8c>)
 8003d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2a:	4a1d      	ldr	r2, [pc, #116]	; (8003da0 <HAL_TIM_Base_MspInit+0x8c>)
 8003d2c:	f043 0301 	orr.w	r3, r3, #1
 8003d30:	6593      	str	r3, [r2, #88]	; 0x58
 8003d32:	4b1b      	ldr	r3, [pc, #108]	; (8003da0 <HAL_TIM_Base_MspInit+0x8c>)
 8003d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d36:	f003 0301 	and.w	r3, r3, #1
 8003d3a:	617b      	str	r3, [r7, #20]
 8003d3c:	697b      	ldr	r3, [r7, #20]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003d3e:	2200      	movs	r2, #0
 8003d40:	2100      	movs	r1, #0
 8003d42:	201c      	movs	r0, #28
 8003d44:	f7fc fbcd 	bl	80004e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003d48:	201c      	movs	r0, #28
 8003d4a:	f7fc fbe6 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003d4e:	e022      	b.n	8003d96 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a13      	ldr	r2, [pc, #76]	; (8003da4 <HAL_TIM_Base_MspInit+0x90>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10c      	bne.n	8003d74 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003d5a:	4b11      	ldr	r3, [pc, #68]	; (8003da0 <HAL_TIM_Base_MspInit+0x8c>)
 8003d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d5e:	4a10      	ldr	r2, [pc, #64]	; (8003da0 <HAL_TIM_Base_MspInit+0x8c>)
 8003d60:	f043 0302 	orr.w	r3, r3, #2
 8003d64:	6593      	str	r3, [r2, #88]	; 0x58
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_TIM_Base_MspInit+0x8c>)
 8003d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	613b      	str	r3, [r7, #16]
 8003d70:	693b      	ldr	r3, [r7, #16]
}
 8003d72:	e010      	b.n	8003d96 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM4)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a0b      	ldr	r2, [pc, #44]	; (8003da8 <HAL_TIM_Base_MspInit+0x94>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d10b      	bne.n	8003d96 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003d7e:	4b08      	ldr	r3, [pc, #32]	; (8003da0 <HAL_TIM_Base_MspInit+0x8c>)
 8003d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d82:	4a07      	ldr	r2, [pc, #28]	; (8003da0 <HAL_TIM_Base_MspInit+0x8c>)
 8003d84:	f043 0304 	orr.w	r3, r3, #4
 8003d88:	6593      	str	r3, [r2, #88]	; 0x58
 8003d8a:	4b05      	ldr	r3, [pc, #20]	; (8003da0 <HAL_TIM_Base_MspInit+0x8c>)
 8003d8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d8e:	f003 0304 	and.w	r3, r3, #4
 8003d92:	60fb      	str	r3, [r7, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
}
 8003d96:	bf00      	nop
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	40021000 	.word	0x40021000
 8003da4:	40000400 	.word	0x40000400
 8003da8:	40000800 	.word	0x40000800

08003dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b08a      	sub	sp, #40	; 0x28
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003db4:	f107 0314 	add.w	r3, r7, #20
 8003db8:	2200      	movs	r2, #0
 8003dba:	601a      	str	r2, [r3, #0]
 8003dbc:	605a      	str	r2, [r3, #4]
 8003dbe:	609a      	str	r2, [r3, #8]
 8003dc0:	60da      	str	r2, [r3, #12]
 8003dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d11d      	bne.n	8003e0a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dce:	4b22      	ldr	r3, [pc, #136]	; (8003e58 <HAL_TIM_MspPostInit+0xac>)
 8003dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dd2:	4a21      	ldr	r2, [pc, #132]	; (8003e58 <HAL_TIM_MspPostInit+0xac>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003dda:	4b1f      	ldr	r3, [pc, #124]	; (8003e58 <HAL_TIM_MspPostInit+0xac>)
 8003ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003dde:	f003 0301 	and.w	r3, r3, #1
 8003de2:	613b      	str	r3, [r7, #16]
 8003de4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = Horiz_Synch_Pin;
 8003de6:	2308      	movs	r3, #8
 8003de8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dea:	2302      	movs	r3, #2
 8003dec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dee:	2300      	movs	r3, #0
 8003df0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df2:	2300      	movs	r3, #0
 8003df4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003df6:	2301      	movs	r3, #1
 8003df8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Horiz_Synch_GPIO_Port, &GPIO_InitStruct);
 8003dfa:	f107 0314 	add.w	r3, r7, #20
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e04:	f7fd f8ec 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8003e08:	e021      	b.n	8003e4e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM3)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a13      	ldr	r2, [pc, #76]	; (8003e5c <HAL_TIM_MspPostInit+0xb0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d11c      	bne.n	8003e4e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e14:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <HAL_TIM_MspPostInit+0xac>)
 8003e16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e18:	4a0f      	ldr	r2, [pc, #60]	; (8003e58 <HAL_TIM_MspPostInit+0xac>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003e20:	4b0d      	ldr	r3, [pc, #52]	; (8003e58 <HAL_TIM_MspPostInit+0xac>)
 8003e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e24:	f003 0301 	and.w	r3, r3, #1
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e2c:	2340      	movs	r3, #64	; 0x40
 8003e2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e30:	2302      	movs	r3, #2
 8003e32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e34:	2300      	movs	r3, #0
 8003e36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e40:	f107 0314 	add.w	r3, r7, #20
 8003e44:	4619      	mov	r1, r3
 8003e46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e4a:	f7fd f8c9 	bl	8000fe0 <HAL_GPIO_Init>
}
 8003e4e:	bf00      	nop
 8003e50:	3728      	adds	r7, #40	; 0x28
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
 8003e56:	bf00      	nop
 8003e58:	40021000 	.word	0x40021000
 8003e5c:	40000400 	.word	0x40000400

08003e60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e60:	b480      	push	{r7}
 8003e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e64:	e7fe      	b.n	8003e64 <NMI_Handler+0x4>

08003e66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e6a:	e7fe      	b.n	8003e6a <HardFault_Handler+0x4>

08003e6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e70:	e7fe      	b.n	8003e70 <MemManage_Handler+0x4>

08003e72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e72:	b480      	push	{r7}
 8003e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e76:	e7fe      	b.n	8003e76 <BusFault_Handler+0x4>

08003e78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e7c:	e7fe      	b.n	8003e7c <UsageFault_Handler+0x4>

08003e7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e7e:	b480      	push	{r7}
 8003e80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e82:	bf00      	nop
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr

08003e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e90:	bf00      	nop
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr

08003e9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr

08003ea8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eac:	f7fc f9fa 	bl	80002a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eb0:	bf00      	nop
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8003eb8:	4802      	ldr	r0, [pc, #8]	; (8003ec4 <DMA1_Channel1_IRQHandler+0x10>)
 8003eba:	f7fc ff42 	bl	8000d42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	200000fc 	.word	0x200000fc

08003ec8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <TIM2_IRQHandler+0x10>)
 8003ece:	f7fe fac2 	bl	8002456 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200001b0 	.word	0x200001b0

08003edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b086      	sub	sp, #24
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ee4:	4a14      	ldr	r2, [pc, #80]	; (8003f38 <_sbrk+0x5c>)
 8003ee6:	4b15      	ldr	r3, [pc, #84]	; (8003f3c <_sbrk+0x60>)
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ef0:	4b13      	ldr	r3, [pc, #76]	; (8003f40 <_sbrk+0x64>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d102      	bne.n	8003efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ef8:	4b11      	ldr	r3, [pc, #68]	; (8003f40 <_sbrk+0x64>)
 8003efa:	4a12      	ldr	r2, [pc, #72]	; (8003f44 <_sbrk+0x68>)
 8003efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003efe:	4b10      	ldr	r3, [pc, #64]	; (8003f40 <_sbrk+0x64>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	693a      	ldr	r2, [r7, #16]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d207      	bcs.n	8003f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f0c:	f000 f858 	bl	8003fc0 <__errno>
 8003f10:	4603      	mov	r3, r0
 8003f12:	220c      	movs	r2, #12
 8003f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f16:	f04f 33ff 	mov.w	r3, #4294967295
 8003f1a:	e009      	b.n	8003f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f1c:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <_sbrk+0x64>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f22:	4b07      	ldr	r3, [pc, #28]	; (8003f40 <_sbrk+0x64>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	4413      	add	r3, r2
 8003f2a:	4a05      	ldr	r2, [pc, #20]	; (8003f40 <_sbrk+0x64>)
 8003f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3718      	adds	r7, #24
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	200a0000 	.word	0x200a0000
 8003f3c:	00000400 	.word	0x00000400
 8003f40:	2000008c 	.word	0x2000008c
 8003f44:	20000210 	.word	0x20000210

08003f48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <SystemInit+0x20>)
 8003f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f52:	4a05      	ldr	r2, [pc, #20]	; (8003f68 <SystemInit+0x20>)
 8003f54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr
 8003f66:	bf00      	nop
 8003f68:	e000ed00 	.word	0xe000ed00

08003f6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fa4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f70:	f7ff ffea 	bl	8003f48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f74:	480c      	ldr	r0, [pc, #48]	; (8003fa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f76:	490d      	ldr	r1, [pc, #52]	; (8003fac <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f78:	4a0d      	ldr	r2, [pc, #52]	; (8003fb0 <LoopForever+0xe>)
  movs r3, #0
 8003f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f7c:	e002      	b.n	8003f84 <LoopCopyDataInit>

08003f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f82:	3304      	adds	r3, #4

08003f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f88:	d3f9      	bcc.n	8003f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f8a:	4a0a      	ldr	r2, [pc, #40]	; (8003fb4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f8c:	4c0a      	ldr	r4, [pc, #40]	; (8003fb8 <LoopForever+0x16>)
  movs r3, #0
 8003f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f90:	e001      	b.n	8003f96 <LoopFillZerobss>

08003f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f94:	3204      	adds	r2, #4

08003f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f98:	d3fb      	bcc.n	8003f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f9a:	f000 f817 	bl	8003fcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f9e:	f7ff fb9b 	bl	80036d8 <main>

08003fa2 <LoopForever>:

LoopForever:
    b LoopForever
 8003fa2:	e7fe      	b.n	8003fa2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003fa4:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8003fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fac:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003fb0:	08004184 	.word	0x08004184
  ldr r2, =_sbss
 8003fb4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003fb8:	2000020c 	.word	0x2000020c

08003fbc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fbc:	e7fe      	b.n	8003fbc <ADC1_IRQHandler>
	...

08003fc0 <__errno>:
 8003fc0:	4b01      	ldr	r3, [pc, #4]	; (8003fc8 <__errno+0x8>)
 8003fc2:	6818      	ldr	r0, [r3, #0]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	2000000c 	.word	0x2000000c

08003fcc <__libc_init_array>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	4d0d      	ldr	r5, [pc, #52]	; (8004004 <__libc_init_array+0x38>)
 8003fd0:	4c0d      	ldr	r4, [pc, #52]	; (8004008 <__libc_init_array+0x3c>)
 8003fd2:	1b64      	subs	r4, r4, r5
 8003fd4:	10a4      	asrs	r4, r4, #2
 8003fd6:	2600      	movs	r6, #0
 8003fd8:	42a6      	cmp	r6, r4
 8003fda:	d109      	bne.n	8003ff0 <__libc_init_array+0x24>
 8003fdc:	4d0b      	ldr	r5, [pc, #44]	; (800400c <__libc_init_array+0x40>)
 8003fde:	4c0c      	ldr	r4, [pc, #48]	; (8004010 <__libc_init_array+0x44>)
 8003fe0:	f000 f8a0 	bl	8004124 <_init>
 8003fe4:	1b64      	subs	r4, r4, r5
 8003fe6:	10a4      	asrs	r4, r4, #2
 8003fe8:	2600      	movs	r6, #0
 8003fea:	42a6      	cmp	r6, r4
 8003fec:	d105      	bne.n	8003ffa <__libc_init_array+0x2e>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff4:	4798      	blx	r3
 8003ff6:	3601      	adds	r6, #1
 8003ff8:	e7ee      	b.n	8003fd8 <__libc_init_array+0xc>
 8003ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffe:	4798      	blx	r3
 8004000:	3601      	adds	r6, #1
 8004002:	e7f2      	b.n	8003fea <__libc_init_array+0x1e>
 8004004:	0800417c 	.word	0x0800417c
 8004008:	0800417c 	.word	0x0800417c
 800400c:	0800417c 	.word	0x0800417c
 8004010:	08004180 	.word	0x08004180

08004014 <malloc>:
 8004014:	4b02      	ldr	r3, [pc, #8]	; (8004020 <malloc+0xc>)
 8004016:	4601      	mov	r1, r0
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	f000 b80b 	b.w	8004034 <_malloc_r>
 800401e:	bf00      	nop
 8004020:	2000000c 	.word	0x2000000c

08004024 <memset>:
 8004024:	4402      	add	r2, r0
 8004026:	4603      	mov	r3, r0
 8004028:	4293      	cmp	r3, r2
 800402a:	d100      	bne.n	800402e <memset+0xa>
 800402c:	4770      	bx	lr
 800402e:	f803 1b01 	strb.w	r1, [r3], #1
 8004032:	e7f9      	b.n	8004028 <memset+0x4>

08004034 <_malloc_r>:
 8004034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004036:	1ccd      	adds	r5, r1, #3
 8004038:	f025 0503 	bic.w	r5, r5, #3
 800403c:	3508      	adds	r5, #8
 800403e:	2d0c      	cmp	r5, #12
 8004040:	bf38      	it	cc
 8004042:	250c      	movcc	r5, #12
 8004044:	2d00      	cmp	r5, #0
 8004046:	4606      	mov	r6, r0
 8004048:	db01      	blt.n	800404e <_malloc_r+0x1a>
 800404a:	42a9      	cmp	r1, r5
 800404c:	d903      	bls.n	8004056 <_malloc_r+0x22>
 800404e:	230c      	movs	r3, #12
 8004050:	6033      	str	r3, [r6, #0]
 8004052:	2000      	movs	r0, #0
 8004054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004056:	f000 f857 	bl	8004108 <__malloc_lock>
 800405a:	4921      	ldr	r1, [pc, #132]	; (80040e0 <_malloc_r+0xac>)
 800405c:	680a      	ldr	r2, [r1, #0]
 800405e:	4614      	mov	r4, r2
 8004060:	b99c      	cbnz	r4, 800408a <_malloc_r+0x56>
 8004062:	4f20      	ldr	r7, [pc, #128]	; (80040e4 <_malloc_r+0xb0>)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	b923      	cbnz	r3, 8004072 <_malloc_r+0x3e>
 8004068:	4621      	mov	r1, r4
 800406a:	4630      	mov	r0, r6
 800406c:	f000 f83c 	bl	80040e8 <_sbrk_r>
 8004070:	6038      	str	r0, [r7, #0]
 8004072:	4629      	mov	r1, r5
 8004074:	4630      	mov	r0, r6
 8004076:	f000 f837 	bl	80040e8 <_sbrk_r>
 800407a:	1c43      	adds	r3, r0, #1
 800407c:	d123      	bne.n	80040c6 <_malloc_r+0x92>
 800407e:	230c      	movs	r3, #12
 8004080:	6033      	str	r3, [r6, #0]
 8004082:	4630      	mov	r0, r6
 8004084:	f000 f846 	bl	8004114 <__malloc_unlock>
 8004088:	e7e3      	b.n	8004052 <_malloc_r+0x1e>
 800408a:	6823      	ldr	r3, [r4, #0]
 800408c:	1b5b      	subs	r3, r3, r5
 800408e:	d417      	bmi.n	80040c0 <_malloc_r+0x8c>
 8004090:	2b0b      	cmp	r3, #11
 8004092:	d903      	bls.n	800409c <_malloc_r+0x68>
 8004094:	6023      	str	r3, [r4, #0]
 8004096:	441c      	add	r4, r3
 8004098:	6025      	str	r5, [r4, #0]
 800409a:	e004      	b.n	80040a6 <_malloc_r+0x72>
 800409c:	6863      	ldr	r3, [r4, #4]
 800409e:	42a2      	cmp	r2, r4
 80040a0:	bf0c      	ite	eq
 80040a2:	600b      	streq	r3, [r1, #0]
 80040a4:	6053      	strne	r3, [r2, #4]
 80040a6:	4630      	mov	r0, r6
 80040a8:	f000 f834 	bl	8004114 <__malloc_unlock>
 80040ac:	f104 000b 	add.w	r0, r4, #11
 80040b0:	1d23      	adds	r3, r4, #4
 80040b2:	f020 0007 	bic.w	r0, r0, #7
 80040b6:	1ac2      	subs	r2, r0, r3
 80040b8:	d0cc      	beq.n	8004054 <_malloc_r+0x20>
 80040ba:	1a1b      	subs	r3, r3, r0
 80040bc:	50a3      	str	r3, [r4, r2]
 80040be:	e7c9      	b.n	8004054 <_malloc_r+0x20>
 80040c0:	4622      	mov	r2, r4
 80040c2:	6864      	ldr	r4, [r4, #4]
 80040c4:	e7cc      	b.n	8004060 <_malloc_r+0x2c>
 80040c6:	1cc4      	adds	r4, r0, #3
 80040c8:	f024 0403 	bic.w	r4, r4, #3
 80040cc:	42a0      	cmp	r0, r4
 80040ce:	d0e3      	beq.n	8004098 <_malloc_r+0x64>
 80040d0:	1a21      	subs	r1, r4, r0
 80040d2:	4630      	mov	r0, r6
 80040d4:	f000 f808 	bl	80040e8 <_sbrk_r>
 80040d8:	3001      	adds	r0, #1
 80040da:	d1dd      	bne.n	8004098 <_malloc_r+0x64>
 80040dc:	e7cf      	b.n	800407e <_malloc_r+0x4a>
 80040de:	bf00      	nop
 80040e0:	20000090 	.word	0x20000090
 80040e4:	20000094 	.word	0x20000094

080040e8 <_sbrk_r>:
 80040e8:	b538      	push	{r3, r4, r5, lr}
 80040ea:	4d06      	ldr	r5, [pc, #24]	; (8004104 <_sbrk_r+0x1c>)
 80040ec:	2300      	movs	r3, #0
 80040ee:	4604      	mov	r4, r0
 80040f0:	4608      	mov	r0, r1
 80040f2:	602b      	str	r3, [r5, #0]
 80040f4:	f7ff fef2 	bl	8003edc <_sbrk>
 80040f8:	1c43      	adds	r3, r0, #1
 80040fa:	d102      	bne.n	8004102 <_sbrk_r+0x1a>
 80040fc:	682b      	ldr	r3, [r5, #0]
 80040fe:	b103      	cbz	r3, 8004102 <_sbrk_r+0x1a>
 8004100:	6023      	str	r3, [r4, #0]
 8004102:	bd38      	pop	{r3, r4, r5, pc}
 8004104:	200001fc 	.word	0x200001fc

08004108 <__malloc_lock>:
 8004108:	4801      	ldr	r0, [pc, #4]	; (8004110 <__malloc_lock+0x8>)
 800410a:	f000 b809 	b.w	8004120 <__retarget_lock_acquire_recursive>
 800410e:	bf00      	nop
 8004110:	20000204 	.word	0x20000204

08004114 <__malloc_unlock>:
 8004114:	4801      	ldr	r0, [pc, #4]	; (800411c <__malloc_unlock+0x8>)
 8004116:	f000 b804 	b.w	8004122 <__retarget_lock_release_recursive>
 800411a:	bf00      	nop
 800411c:	20000204 	.word	0x20000204

08004120 <__retarget_lock_acquire_recursive>:
 8004120:	4770      	bx	lr

08004122 <__retarget_lock_release_recursive>:
 8004122:	4770      	bx	lr

08004124 <_init>:
 8004124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004126:	bf00      	nop
 8004128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800412a:	bc08      	pop	{r3}
 800412c:	469e      	mov	lr, r3
 800412e:	4770      	bx	lr

08004130 <_fini>:
 8004130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004132:	bf00      	nop
 8004134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004136:	bc08      	pop	{r3}
 8004138:	469e      	mov	lr, r3
 800413a:	4770      	bx	lr
